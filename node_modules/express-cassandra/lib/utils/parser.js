'use strict';

var Promise = require('bluebird');
var _ = require('lodash');
var util = require('util');

var dseDriver = void 0;
try {
  // eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved
  dseDriver = require('dse-driver');
} catch (e) {
  dseDriver = null;
}

var cql = Promise.promisifyAll(dseDriver || require('cassandra-driver'));

var buildError = require('../orm/apollo_error.js');
var datatypes = require('../validators/datatypes');
var schemer = require('../validators/schema');

var parser = {};

parser.callback_or_throw = function f(err, callback) {
  if (typeof callback === 'function') {
    callback(err);
    return;
  }
  throw err;
};

parser.extract_type = function f(val) {
  // decompose composite types
  var decomposed = val ? val.replace(/[\s]/g, '').split(/[<,>]/g) : [''];

  for (var d = 0; d < decomposed.length; d++) {
    if (_.has(datatypes, decomposed[d])) {
      return decomposed[d];
    }
  }

  return val;
};

parser.extract_typeDef = function f(val) {
  // decompose composite types
  var decomposed = val ? val.replace(/[\s]/g, '') : '';
  decomposed = decomposed.substr(decomposed.indexOf('<'), decomposed.length - decomposed.indexOf('<'));

  return decomposed;
};

parser.extract_altered_type = function f(normalizedModelSchema, diff) {
  var fieldName = diff.path[0];
  var type = '';
  if (diff.path.length > 1) {
    if (diff.path[1] === 'type') {
      type = diff.rhs;
      if (normalizedModelSchema.fields[fieldName].typeDef) {
        type += normalizedModelSchema.fields[fieldName].typeDef;
      }
    } else {
      type = normalizedModelSchema.fields[fieldName].type;
      type += diff.rhs;
    }
  } else {
    type = diff.rhs.type;
    if (diff.rhs.typeDef) type += diff.rhs.typeDef;
  }
  return type;
};

parser.get_db_value_expression = function f(schema, fieldName, fieldValue) {
  if (fieldValue == null || fieldValue === cql.types.unset) {
    return { query_segment: '?', parameter: fieldValue };
  }

  if (_.isPlainObject(fieldValue) && fieldValue.$db_function) {
    return fieldValue.$db_function;
  }

  var fieldType = schemer.get_field_type(schema, fieldName);
  var validators = schemer.get_validators(schema, fieldName);

  if (_.isArray(fieldValue) && fieldType !== 'list' && fieldType !== 'set' && fieldType !== 'frozen') {
    var val = fieldValue.map(function (v) {
      var dbVal = parser.get_db_value_expression(schema, fieldName, v);

      if (_.isPlainObject(dbVal) && dbVal.query_segment) return dbVal.parameter;
      return dbVal;
    });

    return { query_segment: '?', parameter: val };
  }

  var validationMessage = schemer.get_validation_message(validators, fieldValue);
  if (typeof validationMessage === 'function') {
    throw buildError('model.validator.invalidvalue', validationMessage(fieldValue, fieldName, fieldType));
  }

  if (fieldType === 'counter') {
    var counterQuerySegment = util.format('"%s"', fieldName);
    if (fieldValue >= 0) counterQuerySegment += ' + ?';else counterQuerySegment += ' - ?';
    fieldValue = Math.abs(fieldValue);
    return { query_segment: counterQuerySegment, parameter: fieldValue };
  }

  return { query_segment: '?', parameter: fieldValue };
};

parser.unset_not_allowed = function f(operation, schema, fieldName, callback) {
  if (schemer.is_primary_key_field(schema, fieldName)) {
    parser.callback_or_throw(buildError(`model.${operation}.unsetkey`, fieldName), callback);
    return true;
  }
  if (schemer.is_required_field(schema, fieldName)) {
    parser.callback_or_throw(buildError(`model.${operation}.unsetrequired`, fieldName), callback);
    return true;
  }
  return false;
};

parser.get_inplace_update_expression = function f(schema, fieldName, fieldValue, updateClauses, queryParams) {
  var $add = _.isPlainObject(fieldValue) && fieldValue.$add || false;
  var $append = _.isPlainObject(fieldValue) && fieldValue.$append || false;
  var $prepend = _.isPlainObject(fieldValue) && fieldValue.$prepend || false;
  var $replace = _.isPlainObject(fieldValue) && fieldValue.$replace || false;
  var $remove = _.isPlainObject(fieldValue) && fieldValue.$remove || false;

  fieldValue = $add || $append || $prepend || $replace || $remove || fieldValue;

  var dbVal = parser.get_db_value_expression(schema, fieldName, fieldValue);

  if (!_.isPlainObject(dbVal) || !dbVal.query_segment) {
    updateClauses.push(util.format('"%s"=%s', fieldName, dbVal));
    return;
  }

  var fieldType = schemer.get_field_type(schema, fieldName);

  if (['map', 'list', 'set'].includes(fieldType)) {
    if ($add || $append) {
      dbVal.query_segment = util.format('"%s" + %s', fieldName, dbVal.query_segment);
    } else if ($prepend) {
      if (fieldType === 'list') {
        dbVal.query_segment = util.format('%s + "%s"', dbVal.query_segment, fieldName);
      } else {
        throw buildError('model.update.invalidprependop', util.format('%s datatypes does not support $prepend, use $add instead', fieldType));
      }
    } else if ($remove) {
      dbVal.query_segment = util.format('"%s" - %s', fieldName, dbVal.query_segment);
      if (fieldType === 'map') dbVal.parameter = Object.keys(dbVal.parameter);
    }
  }

  if ($replace) {
    if (fieldType === 'map') {
      updateClauses.push(util.format('"%s"[?]=%s', fieldName, dbVal.query_segment));
      var replaceKeys = Object.keys(dbVal.parameter);
      var replaceValues = _.values(dbVal.parameter);
      if (replaceKeys.length === 1) {
        queryParams.push(replaceKeys[0]);
        queryParams.push(replaceValues[0]);
      } else {
        throw buildError('model.update.invalidreplaceop', '$replace in map does not support more than one item');
      }
    } else if (fieldType === 'list') {
      updateClauses.push(util.format('"%s"[?]=%s', fieldName, dbVal.query_segment));
      if (dbVal.parameter.length === 2) {
        queryParams.push(dbVal.parameter[0]);
        queryParams.push(dbVal.parameter[1]);
      } else {
        throw buildError('model.update.invalidreplaceop', '$replace in list should have exactly 2 items, first one as the index and the second one as the value');
      }
    } else {
      throw buildError('model.update.invalidreplaceop', util.format('%s datatypes does not support $replace', fieldType));
    }
  } else {
    updateClauses.push(util.format('"%s"=%s', fieldName, dbVal.query_segment));
    queryParams.push(dbVal.parameter);
  }
};

parser.get_update_value_expression = function f(instance, schema, updateValues, callback) {
  var updateClauses = [];
  var queryParams = [];

  if (schema.options && schema.options.timestamps) {
    if (!updateValues[schema.options.timestamps.updatedAt]) {
      updateValues[schema.options.timestamps.updatedAt] = { $db_function: 'toTimestamp(now())' };
    }
  }

  if (schema.options && schema.options.versions) {
    if (!updateValues[schema.options.versions.key]) {
      updateValues[schema.options.versions.key] = { $db_function: 'now()' };
    }
  }

  var errorHappened = Object.keys(updateValues).some(function (fieldName) {
    if (schema.fields[fieldName] === undefined || schema.fields[fieldName].virtual) return false;

    var fieldType = schemer.get_field_type(schema, fieldName);
    var fieldValue = updateValues[fieldName];

    if (fieldValue === undefined) {
      fieldValue = instance._get_default_value(fieldName);
      if (fieldValue === undefined) {
        return parser.unset_not_allowed('update', schema, fieldName, callback);
      } else if (!schema.fields[fieldName].rule || !schema.fields[fieldName].rule.ignore_default) {
        // did set a default value, ignore default is not set
        if (instance.validate(fieldName, fieldValue) !== true) {
          parser.callback_or_throw(buildError('model.update.invaliddefaultvalue', fieldValue, fieldName, fieldType), callback);
          return true;
        }
      }
    }

    if (fieldValue === null || fieldValue === cql.types.unset) {
      if (parser.unset_not_allowed('update', schema, fieldName, callback)) {
        return true;
      }
    }

    try {
      parser.get_inplace_update_expression(schema, fieldName, fieldValue, updateClauses, queryParams);
    } catch (e) {
      parser.callback_or_throw(e, callback);
      return true;
    }
    return false;
  });

  return { updateClauses, queryParams, errorHappened };
};

parser.get_save_value_expression = function fn(instance, schema, callback) {
  var identifiers = [];
  var values = [];
  var queryParams = [];

  if (schema.options && schema.options.timestamps) {
    if (instance[schema.options.timestamps.updatedAt]) {
      instance[schema.options.timestamps.updatedAt] = { $db_function: 'toTimestamp(now())' };
    }
  }

  if (schema.options && schema.options.versions) {
    if (instance[schema.options.versions.key]) {
      instance[schema.options.versions.key] = { $db_function: 'now()' };
    }
  }

  var errorHappened = Object.keys(schema.fields).some(function (fieldName) {
    if (schema.fields[fieldName].virtual) return false;

    // check field value
    var fieldType = schemer.get_field_type(schema, fieldName);
    var fieldValue = instance[fieldName];

    if (fieldValue === undefined) {
      fieldValue = instance._get_default_value(fieldName);
      if (fieldValue === undefined) {
        return parser.unset_not_allowed('save', schema, fieldName, callback);
      } else if (!schema.fields[fieldName].rule || !schema.fields[fieldName].rule.ignore_default) {
        // did set a default value, ignore default is not set
        if (instance.validate(fieldName, fieldValue) !== true) {
          parser.callback_or_throw(buildError('model.save.invaliddefaultvalue', fieldValue, fieldName, fieldType), callback);
          return true;
        }
      }
    }

    if (fieldValue === null || fieldValue === cql.types.unset) {
      if (parser.unset_not_allowed('save', schema, fieldName, callback)) {
        return true;
      }
    }

    identifiers.push(util.format('"%s"', fieldName));

    try {
      var dbVal = parser.get_db_value_expression(schema, fieldName, fieldValue);
      if (_.isPlainObject(dbVal) && dbVal.query_segment) {
        values.push(dbVal.query_segment);
        queryParams.push(dbVal.parameter);
      } else {
        values.push(dbVal);
      }
    } catch (e) {
      parser.callback_or_throw(e, callback);
      return true;
    }
    return false;
  });

  return {
    identifiers,
    values,
    queryParams,
    errorHappened
  };
};

parser.extract_query_relations = function f(fieldName, relationKey, relationValue, schema, validOperators) {
  var queryRelations = [];
  var queryParams = [];

  if (!_.has(validOperators, relationKey.toLowerCase())) {
    throw buildError('model.find.invalidop', relationKey);
  }

  relationKey = relationKey.toLowerCase();
  if (relationKey === '$in' && !_.isArray(relationValue)) {
    throw buildError('model.find.invalidinop');
  }
  if (relationKey === '$token' && !(relationValue instanceof Object)) {
    throw buildError('model.find.invalidtoken');
  }

  var operator = validOperators[relationKey];
  var whereTemplate = '"%s" %s %s';

  var buildQueryRelations = function buildQueryRelations(fieldNameLocal, relationValueLocal) {
    var dbVal = parser.get_db_value_expression(schema, fieldNameLocal, relationValueLocal);
    if (_.isPlainObject(dbVal) && dbVal.query_segment) {
      queryRelations.push(util.format(whereTemplate, fieldNameLocal, operator, dbVal.query_segment));
      queryParams.push(dbVal.parameter);
    } else {
      queryRelations.push(util.format(whereTemplate, fieldNameLocal, operator, dbVal));
    }
  };

  var buildTokenQueryRelations = function buildTokenQueryRelations(tokenRelationKey, tokenRelationValue) {
    tokenRelationKey = tokenRelationKey.toLowerCase();
    if (_.has(validOperators, tokenRelationKey) && tokenRelationKey !== '$token' && tokenRelationKey !== '$in') {
      operator = validOperators[tokenRelationKey];
    } else {
      throw buildError('model.find.invalidtokenop', tokenRelationKey);
    }

    if (_.isArray(tokenRelationValue)) {
      var tokenKeys = fieldName.split(',');
      for (var tokenIndex = 0; tokenIndex < tokenRelationValue.length; tokenIndex++) {
        tokenKeys[tokenIndex] = tokenKeys[tokenIndex].trim();
        var dbVal = parser.get_db_value_expression(schema, tokenKeys[tokenIndex], tokenRelationValue[tokenIndex]);
        if (_.isPlainObject(dbVal) && dbVal.query_segment) {
          tokenRelationValue[tokenIndex] = dbVal.query_segment;
          queryParams.push(dbVal.parameter);
        } else {
          tokenRelationValue[tokenIndex] = dbVal;
        }
      }
      queryRelations.push(util.format(whereTemplate, tokenKeys.join('","'), operator, tokenRelationValue.toString()));
    } else {
      buildQueryRelations(fieldName, tokenRelationValue);
    }
  };

  if (relationKey === '$token') {
    whereTemplate = 'token("%s") %s token(%s)';

    var tokenRelationKeys = Object.keys(relationValue);
    for (var tokenRK = 0; tokenRK < tokenRelationKeys.length; tokenRK++) {
      var tokenRelationKey = tokenRelationKeys[tokenRK];
      var tokenRelationValue = relationValue[tokenRelationKey];
      buildTokenQueryRelations(tokenRelationKey, tokenRelationValue);
    }
  } else if (relationKey === '$contains') {
    var fieldType1 = schemer.get_field_type(schema, fieldName);
    if (['map', 'list', 'set', 'frozen'].includes(fieldType1)) {
      if (fieldType1 === 'map' && _.isPlainObject(relationValue)) {
        Object.keys(relationValue).forEach(function (key) {
          queryRelations.push(util.format('"%s"[%s] %s %s', fieldName, '?', '=', '?'));
          queryParams.push(key);
          queryParams.push(relationValue[key]);
        });
      } else {
        queryRelations.push(util.format(whereTemplate, fieldName, operator, '?'));
        queryParams.push(relationValue);
      }
    } else {
      throw buildError('model.find.invalidcontainsop');
    }
  } else if (relationKey === '$contains_key') {
    var fieldType2 = schemer.get_field_type(schema, fieldName);
    if (fieldType2 !== 'map') {
      throw buildError('model.find.invalidcontainskeyop');
    }
    queryRelations.push(util.format(whereTemplate, fieldName, operator, '?'));
    queryParams.push(relationValue);
  } else {
    buildQueryRelations(fieldName, relationValue);
  }
  return { queryRelations, queryParams };
};

parser._parse_query_object = function f(schema, queryObject) {
  var queryRelations = [];
  var queryParams = [];

  Object.keys(queryObject).forEach(function (fieldName) {
    if (fieldName.startsWith('$')) {
      // search queries based on lucene index or solr
      // escape all single quotes for queries in cassandra
      if (fieldName === '$expr') {
        if (typeof queryObject[fieldName].index === 'string' && typeof queryObject[fieldName].query === 'string') {
          queryRelations.push(util.format("expr(%s,'%s')", queryObject[fieldName].index, queryObject[fieldName].query.replace(/'/g, "''")));
        } else {
          throw buildError('model.find.invalidexpr');
        }
      } else if (fieldName === '$solr_query') {
        if (typeof queryObject[fieldName] === 'string') {
          queryRelations.push(util.format("solr_query='%s'", queryObject[fieldName].replace(/'/g, "''")));
        } else {
          throw buildError('model.find.invalidsolrquery');
        }
      }
      return;
    }

    var whereObject = queryObject[fieldName];
    // Array of operators
    if (!_.isArray(whereObject)) whereObject = [whereObject];

    for (var fk = 0; fk < whereObject.length; fk++) {
      var fieldRelation = whereObject[fk];

      var cqlOperators = {
        $eq: '=',
        $ne: '!=',
        $isnt: 'IS NOT',
        $gt: '>',
        $lt: '<',
        $gte: '>=',
        $lte: '<=',
        $in: 'IN',
        $like: 'LIKE',
        $token: 'token',
        $contains: 'CONTAINS',
        $contains_key: 'CONTAINS KEY'
      };

      if (_.isPlainObject(fieldRelation)) {
        var validKeys = Object.keys(cqlOperators);
        var fieldRelationKeys = Object.keys(fieldRelation);
        for (var i = 0; i < fieldRelationKeys.length; i++) {
          if (!validKeys.includes(fieldRelationKeys[i])) {
            // field relation key invalid, apply default $eq operator
            fieldRelation = { $eq: fieldRelation };
            break;
          }
        }
      } else {
        fieldRelation = { $eq: fieldRelation };
      }

      var relationKeys = Object.keys(fieldRelation);
      for (var rk = 0; rk < relationKeys.length; rk++) {
        var relationKey = relationKeys[rk];
        var relationValue = fieldRelation[relationKey];
        var extractedRelations = parser.extract_query_relations(fieldName, relationKey, relationValue, schema, cqlOperators);
        queryRelations = queryRelations.concat(extractedRelations.queryRelations);
        queryParams = queryParams.concat(extractedRelations.queryParams);
      }
    }
  });

  return { queryRelations, queryParams };
};

parser.get_filter_clause = function f(schema, queryObject, clause) {
  var parsedObject = parser._parse_query_object(schema, queryObject);
  var filterClause = {};
  if (parsedObject.queryRelations.length > 0) {
    filterClause.query = util.format('%s %s', clause, parsedObject.queryRelations.join(' AND '));
  } else {
    filterClause.query = '';
  }
  filterClause.params = parsedObject.queryParams;
  return filterClause;
};

parser.get_filter_clause_ddl = function f(schema, queryObject, clause) {
  var filterClause = parser.get_filter_clause(schema, queryObject, clause);
  var filterQuery = filterClause.query;
  filterClause.params.forEach(function (param) {
    var queryParam = void 0;
    if (typeof param === 'string') {
      queryParam = util.format("'%s'", param);
    } else if (param instanceof Date) {
      queryParam = util.format("'%s'", param.toISOString());
    } else if (param instanceof cql.types.Long || param instanceof cql.types.Integer || param instanceof cql.types.BigDecimal || param instanceof cql.types.TimeUuid || param instanceof cql.types.Uuid) {
      queryParam = param.toString();
    } else if (param instanceof cql.types.LocalDate || param instanceof cql.types.LocalTime || param instanceof cql.types.InetAddress) {
      queryParam = util.format("'%s'", param.toString());
    } else {
      queryParam = param;
    }
    // TODO: unhandled if queryParam is a string containing ? character
    // though this is unlikely to have in materialized view filters, but...
    filterQuery = filterQuery.replace('?', queryParam);
  });
  return filterQuery;
};

parser.get_where_clause = function f(schema, queryObject) {
  return parser.get_filter_clause(schema, queryObject, 'WHERE');
};

parser.get_if_clause = function f(schema, queryObject) {
  return parser.get_filter_clause(schema, queryObject, 'IF');
};

parser.get_primary_key_clauses = function f(schema) {
  var partitionKey = schema.key[0];
  var clusteringKey = schema.key.slice(1, schema.key.length);
  var clusteringOrder = [];

  for (var field = 0; field < clusteringKey.length; field++) {
    if (schema.clustering_order && schema.clustering_order[clusteringKey[field]] && schema.clustering_order[clusteringKey[field]].toLowerCase() === 'desc') {
      clusteringOrder.push(util.format('"%s" DESC', clusteringKey[field]));
    } else {
      clusteringOrder.push(util.format('"%s" ASC', clusteringKey[field]));
    }
  }

  var clusteringOrderClause = '';
  if (clusteringOrder.length > 0) {
    clusteringOrderClause = util.format(' WITH CLUSTERING ORDER BY (%s)', clusteringOrder.toString());
  }

  var partitionKeyClause = '';
  if (_.isArray(partitionKey)) {
    partitionKeyClause = partitionKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
  } else {
    partitionKeyClause = util.format('"%s"', partitionKey);
  }

  var clusteringKeyClause = '';
  if (clusteringKey.length) {
    clusteringKey = clusteringKey.map(function (v) {
      return util.format('"%s"', v);
    }).join(',');
    clusteringKeyClause = util.format(',%s', clusteringKey);
  }

  return { partitionKeyClause, clusteringKeyClause, clusteringOrderClause };
};

parser.get_mview_where_clause = function f(schema, viewSchema) {
  var clauses = parser.get_primary_key_clauses(viewSchema);
  var whereClause = clauses.partitionKeyClause.split(',').join(' IS NOT NULL AND ');
  if (clauses.clusteringKeyClause) whereClause += clauses.clusteringKeyClause.split(',').join(' IS NOT NULL AND ');
  whereClause += ' IS NOT NULL';

  var filters = _.cloneDeep(viewSchema.filters);

  if (_.isPlainObject(filters)) {
    // delete primary key fields defined as isn't null in filters
    Object.keys(filters).forEach(function (filterKey) {
      if (filters[filterKey].$isnt === null && (viewSchema.key.includes(filterKey) || viewSchema.key[0].includes(filterKey))) {
        delete filters[filterKey].$isnt;
      }
    });

    var filterClause = parser.get_filter_clause_ddl(schema, filters, 'AND');
    whereClause += util.format(' %s', filterClause).replace(/IS NOT null/g, 'IS NOT NULL');
  }

  // remove unnecessarily quoted field names in generated where clause
  // so that it matches the where_clause from database schema
  var quotedFieldNames = whereClause.match(/"(.*?)"/g);
  quotedFieldNames.forEach(function (fieldName) {
    var unquotedFieldName = fieldName.replace(/"/g, '');
    var reservedKeywords = ['ADD', 'AGGREGATE', 'ALLOW', 'ALTER', 'AND', 'ANY', 'APPLY', 'ASC', 'AUTHORIZE', 'BATCH', 'BEGIN', 'BY', 'COLUMNFAMILY', 'CREATE', 'DELETE', 'DESC', 'DROP', 'EACH_QUORUM', 'ENTRIES', 'FROM', 'FULL', 'GRANT', 'IF', 'IN', 'INDEX', 'INET', 'INFINITY', 'INSERT', 'INTO', 'KEYSPACE', 'KEYSPACES', 'LIMIT', 'LOCAL_ONE', 'LOCAL_QUORUM', 'MATERIALIZED', 'MODIFY', 'NAN', 'NORECURSIVE', 'NOT', 'OF', 'ON', 'ONE', 'ORDER', 'PARTITION', 'PASSWORD', 'PER', 'PRIMARY', 'QUORUM', 'RENAME', 'REVOKE', 'SCHEMA', 'SELECT', 'SET', 'TABLE', 'TIME', 'THREE', 'TO', 'TOKEN', 'TRUNCATE', 'TWO', 'UNLOGGED', 'UPDATE', 'USE', 'USING', 'VIEW', 'WHERE', 'WITH'];
    if (unquotedFieldName === unquotedFieldName.toLowerCase() && !reservedKeywords.includes(unquotedFieldName.toUpperCase())) {
      whereClause = whereClause.replace(fieldName, unquotedFieldName);
    }
  });
  return whereClause.trim();
};

parser.get_orderby_clause = function f(queryObject) {
  var orderKeys = [];
  Object.keys(queryObject).forEach(function (k) {
    var queryItem = queryObject[k];
    if (k.toLowerCase() === '$orderby') {
      if (!(queryItem instanceof Object)) {
        throw buildError('model.find.invalidorder');
      }
      var orderItemKeys = Object.keys(queryItem);

      for (var i = 0; i < orderItemKeys.length; i++) {
        var cqlOrderDirection = { $asc: 'ASC', $desc: 'DESC' };
        if (orderItemKeys[i].toLowerCase() in cqlOrderDirection) {
          var orderFields = queryItem[orderItemKeys[i]];

          if (!_.isArray(orderFields)) {
            orderFields = [orderFields];
          }

          for (var j = 0; j < orderFields.length; j++) {
            orderKeys.push(util.format('"%s" %s', orderFields[j], cqlOrderDirection[orderItemKeys[i]]));
          }
        } else {
          throw buildError('model.find.invalidordertype', orderItemKeys[i]);
        }
      }
    }
  });
  return orderKeys.length ? util.format('ORDER BY %s', orderKeys.join(', ')) : '';
};

parser.get_groupby_clause = function f(queryObject) {
  var groupbyKeys = [];

  Object.keys(queryObject).forEach(function (k) {
    var queryItem = queryObject[k];

    if (k.toLowerCase() === '$groupby') {
      if (!(queryItem instanceof Array)) {
        throw buildError('model.find.invalidgroup');
      }

      groupbyKeys = groupbyKeys.concat(queryItem);
    }
  });

  groupbyKeys = groupbyKeys.map(function (key) {
    return `"${key}"`;
  });

  return groupbyKeys.length ? util.format('GROUP BY %s', groupbyKeys.join(', ')) : '';
};

parser.get_limit_clause = function f(queryObject) {
  var limit = null;
  Object.keys(queryObject).forEach(function (k) {
    var queryItem = queryObject[k];
    if (k.toLowerCase() === '$limit') {
      if (typeof queryItem !== 'number') throw buildError('model.find.limittype');
      limit = queryItem;
    }
  });
  return limit ? util.format('LIMIT %s', limit) : '';
};

parser.get_select_clause = function f(options) {
  var selectClause = '*';
  if (options.select && _.isArray(options.select) && options.select.length > 0) {
    var selectArray = [];
    for (var i = 0; i < options.select.length; i++) {
      // separate the aggregate function and the column name if select is an aggregate function
      var selection = options.select[i].split(/[(, )]/g).filter(function (e) {
        return e;
      });
      if (selection.length === 1) {
        if (selection[0] === '*') selectArray.push('*');else selectArray.push(util.format('"%s"', selection[0]));
      } else if (selection.length === 2) {
        selectArray.push(util.format('%s("%s")', selection[0], selection[1]));
      } else if (selection.length >= 3 && selection[selection.length - 2].toLowerCase() === 'as') {
        var selectionEndChunk = selection.splice(selection.length - 2);
        var selectionChunk = '';
        if (selection.length === 1) {
          selectionChunk = util.format('"%s"', selection[0]);
        } else if (selection.length === 2) {
          selectionChunk = util.format('%s("%s")', selection[0], selection[1]);
        } else {
          selectionChunk = util.format('%s(%s)', selection[0], `"${selection.splice(1).join('","')}"`);
        }
        selectArray.push(util.format('%s AS "%s"', selectionChunk, selectionEndChunk[1]));
      } else if (selection.length >= 3) {
        selectArray.push(util.format('%s(%s)', selection[0], `"${selection.splice(1).join('","')}"`));
      }
    }
    selectClause = selectArray.join(',');
  }
  return selectClause.trim();
};

module.exports = parser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wYXJzZXIuanMiXSwibmFtZXMiOlsiUHJvbWlzZSIsInJlcXVpcmUiLCJfIiwidXRpbCIsImRzZURyaXZlciIsImUiLCJjcWwiLCJwcm9taXNpZnlBbGwiLCJidWlsZEVycm9yIiwiZGF0YXR5cGVzIiwic2NoZW1lciIsInBhcnNlciIsImNhbGxiYWNrX29yX3Rocm93IiwiZiIsImVyciIsImNhbGxiYWNrIiwiZXh0cmFjdF90eXBlIiwidmFsIiwiZGVjb21wb3NlZCIsInJlcGxhY2UiLCJzcGxpdCIsImQiLCJsZW5ndGgiLCJoYXMiLCJleHRyYWN0X3R5cGVEZWYiLCJzdWJzdHIiLCJpbmRleE9mIiwiZXh0cmFjdF9hbHRlcmVkX3R5cGUiLCJub3JtYWxpemVkTW9kZWxTY2hlbWEiLCJkaWZmIiwiZmllbGROYW1lIiwicGF0aCIsInR5cGUiLCJyaHMiLCJmaWVsZHMiLCJ0eXBlRGVmIiwiZ2V0X2RiX3ZhbHVlX2V4cHJlc3Npb24iLCJzY2hlbWEiLCJmaWVsZFZhbHVlIiwidHlwZXMiLCJ1bnNldCIsInF1ZXJ5X3NlZ21lbnQiLCJwYXJhbWV0ZXIiLCJpc1BsYWluT2JqZWN0IiwiJGRiX2Z1bmN0aW9uIiwiZmllbGRUeXBlIiwiZ2V0X2ZpZWxkX3R5cGUiLCJ2YWxpZGF0b3JzIiwiZ2V0X3ZhbGlkYXRvcnMiLCJpc0FycmF5IiwibWFwIiwidiIsImRiVmFsIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJnZXRfdmFsaWRhdGlvbl9tZXNzYWdlIiwiY291bnRlclF1ZXJ5U2VnbWVudCIsImZvcm1hdCIsIk1hdGgiLCJhYnMiLCJ1bnNldF9ub3RfYWxsb3dlZCIsIm9wZXJhdGlvbiIsImlzX3ByaW1hcnlfa2V5X2ZpZWxkIiwiaXNfcmVxdWlyZWRfZmllbGQiLCJnZXRfaW5wbGFjZV91cGRhdGVfZXhwcmVzc2lvbiIsInVwZGF0ZUNsYXVzZXMiLCJxdWVyeVBhcmFtcyIsIiRhZGQiLCIkYXBwZW5kIiwiJHByZXBlbmQiLCIkcmVwbGFjZSIsIiRyZW1vdmUiLCJwdXNoIiwiaW5jbHVkZXMiLCJPYmplY3QiLCJrZXlzIiwicmVwbGFjZUtleXMiLCJyZXBsYWNlVmFsdWVzIiwidmFsdWVzIiwiZ2V0X3VwZGF0ZV92YWx1ZV9leHByZXNzaW9uIiwiaW5zdGFuY2UiLCJ1cGRhdGVWYWx1ZXMiLCJvcHRpb25zIiwidGltZXN0YW1wcyIsInVwZGF0ZWRBdCIsInZlcnNpb25zIiwia2V5IiwiZXJyb3JIYXBwZW5lZCIsInNvbWUiLCJ1bmRlZmluZWQiLCJ2aXJ0dWFsIiwiX2dldF9kZWZhdWx0X3ZhbHVlIiwicnVsZSIsImlnbm9yZV9kZWZhdWx0IiwidmFsaWRhdGUiLCJnZXRfc2F2ZV92YWx1ZV9leHByZXNzaW9uIiwiZm4iLCJpZGVudGlmaWVycyIsImV4dHJhY3RfcXVlcnlfcmVsYXRpb25zIiwicmVsYXRpb25LZXkiLCJyZWxhdGlvblZhbHVlIiwidmFsaWRPcGVyYXRvcnMiLCJxdWVyeVJlbGF0aW9ucyIsInRvTG93ZXJDYXNlIiwib3BlcmF0b3IiLCJ3aGVyZVRlbXBsYXRlIiwiYnVpbGRRdWVyeVJlbGF0aW9ucyIsImZpZWxkTmFtZUxvY2FsIiwicmVsYXRpb25WYWx1ZUxvY2FsIiwiYnVpbGRUb2tlblF1ZXJ5UmVsYXRpb25zIiwidG9rZW5SZWxhdGlvbktleSIsInRva2VuUmVsYXRpb25WYWx1ZSIsInRva2VuS2V5cyIsInRva2VuSW5kZXgiLCJ0cmltIiwiam9pbiIsInRvU3RyaW5nIiwidG9rZW5SZWxhdGlvbktleXMiLCJ0b2tlblJLIiwiZmllbGRUeXBlMSIsImZvckVhY2giLCJmaWVsZFR5cGUyIiwiX3BhcnNlX3F1ZXJ5X29iamVjdCIsInF1ZXJ5T2JqZWN0Iiwic3RhcnRzV2l0aCIsImluZGV4IiwicXVlcnkiLCJ3aGVyZU9iamVjdCIsImZrIiwiZmllbGRSZWxhdGlvbiIsImNxbE9wZXJhdG9ycyIsIiRlcSIsIiRuZSIsIiRpc250IiwiJGd0IiwiJGx0IiwiJGd0ZSIsIiRsdGUiLCIkaW4iLCIkbGlrZSIsIiR0b2tlbiIsIiRjb250YWlucyIsIiRjb250YWluc19rZXkiLCJ2YWxpZEtleXMiLCJmaWVsZFJlbGF0aW9uS2V5cyIsImkiLCJyZWxhdGlvbktleXMiLCJyayIsImV4dHJhY3RlZFJlbGF0aW9ucyIsImNvbmNhdCIsImdldF9maWx0ZXJfY2xhdXNlIiwiY2xhdXNlIiwicGFyc2VkT2JqZWN0IiwiZmlsdGVyQ2xhdXNlIiwicGFyYW1zIiwiZ2V0X2ZpbHRlcl9jbGF1c2VfZGRsIiwiZmlsdGVyUXVlcnkiLCJwYXJhbSIsInF1ZXJ5UGFyYW0iLCJEYXRlIiwidG9JU09TdHJpbmciLCJMb25nIiwiSW50ZWdlciIsIkJpZ0RlY2ltYWwiLCJUaW1lVXVpZCIsIlV1aWQiLCJMb2NhbERhdGUiLCJMb2NhbFRpbWUiLCJJbmV0QWRkcmVzcyIsImdldF93aGVyZV9jbGF1c2UiLCJnZXRfaWZfY2xhdXNlIiwiZ2V0X3ByaW1hcnlfa2V5X2NsYXVzZXMiLCJwYXJ0aXRpb25LZXkiLCJjbHVzdGVyaW5nS2V5Iiwic2xpY2UiLCJjbHVzdGVyaW5nT3JkZXIiLCJmaWVsZCIsImNsdXN0ZXJpbmdfb3JkZXIiLCJjbHVzdGVyaW5nT3JkZXJDbGF1c2UiLCJwYXJ0aXRpb25LZXlDbGF1c2UiLCJjbHVzdGVyaW5nS2V5Q2xhdXNlIiwiZ2V0X212aWV3X3doZXJlX2NsYXVzZSIsInZpZXdTY2hlbWEiLCJjbGF1c2VzIiwid2hlcmVDbGF1c2UiLCJmaWx0ZXJzIiwiY2xvbmVEZWVwIiwiZmlsdGVyS2V5IiwicXVvdGVkRmllbGROYW1lcyIsIm1hdGNoIiwidW5xdW90ZWRGaWVsZE5hbWUiLCJyZXNlcnZlZEtleXdvcmRzIiwidG9VcHBlckNhc2UiLCJnZXRfb3JkZXJieV9jbGF1c2UiLCJvcmRlcktleXMiLCJrIiwicXVlcnlJdGVtIiwib3JkZXJJdGVtS2V5cyIsImNxbE9yZGVyRGlyZWN0aW9uIiwiJGFzYyIsIiRkZXNjIiwib3JkZXJGaWVsZHMiLCJqIiwiZ2V0X2dyb3VwYnlfY2xhdXNlIiwiZ3JvdXBieUtleXMiLCJBcnJheSIsImdldF9saW1pdF9jbGF1c2UiLCJsaW1pdCIsImdldF9zZWxlY3RfY2xhdXNlIiwic2VsZWN0Q2xhdXNlIiwic2VsZWN0Iiwic2VsZWN0QXJyYXkiLCJzZWxlY3Rpb24iLCJmaWx0ZXIiLCJzZWxlY3Rpb25FbmRDaHVuayIsInNwbGljZSIsInNlbGVjdGlvbkNodW5rIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxVQUFVQyxRQUFRLFVBQVIsQ0FBaEI7QUFDQSxJQUFNQyxJQUFJRCxRQUFRLFFBQVIsQ0FBVjtBQUNBLElBQU1FLE9BQU9GLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQUlHLGtCQUFKO0FBQ0EsSUFBSTtBQUNGO0FBQ0FBLGNBQVlILFFBQVEsWUFBUixDQUFaO0FBQ0QsQ0FIRCxDQUdFLE9BQU9JLENBQVAsRUFBVTtBQUNWRCxjQUFZLElBQVo7QUFDRDs7QUFFRCxJQUFNRSxNQUFNTixRQUFRTyxZQUFSLENBQXFCSCxhQUFhSCxRQUFRLGtCQUFSLENBQWxDLENBQVo7O0FBRUEsSUFBTU8sYUFBYVAsUUFBUSx3QkFBUixDQUFuQjtBQUNBLElBQU1RLFlBQVlSLFFBQVEseUJBQVIsQ0FBbEI7QUFDQSxJQUFNUyxVQUFVVCxRQUFRLHNCQUFSLENBQWhCOztBQUVBLElBQU1VLFNBQVMsRUFBZjs7QUFFQUEsT0FBT0MsaUJBQVAsR0FBMkIsU0FBU0MsQ0FBVCxDQUFXQyxHQUFYLEVBQWdCQyxRQUFoQixFQUEwQjtBQUNuRCxNQUFJLE9BQU9BLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbENBLGFBQVNELEdBQVQ7QUFDQTtBQUNEO0FBQ0QsUUFBT0EsR0FBUDtBQUNELENBTkQ7O0FBUUFILE9BQU9LLFlBQVAsR0FBc0IsU0FBU0gsQ0FBVCxDQUFXSSxHQUFYLEVBQWdCO0FBQ3BDO0FBQ0EsTUFBTUMsYUFBYUQsTUFBTUEsSUFBSUUsT0FBSixDQUFZLE9BQVosRUFBcUIsRUFBckIsRUFBeUJDLEtBQXpCLENBQStCLFFBQS9CLENBQU4sR0FBaUQsQ0FBQyxFQUFE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QWdDLEdBQXhFLENBQWpCO0FBQ0Q7QUFDRjtBQUNEOEYsbUJBQWVFLFlBQVloRyxJQUFaLENBQWlCLEdBQWpCLENBQWY7QUFDRDtBQUNELFNBQU84RixhQUFhL0YsSUFBYixFQUFQO0FBQ0QsQ0E5QkQ7O0FBZ0NBdUcsT0FBT0MsT0FBUCxHQUFpQjlNLE1BQWpCIiwiZmlsZSI6InBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxubGV0IGRzZURyaXZlcjtcbnRyeSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMsIGltcG9ydC9uby11bnJlc29sdmVkXG4gIGRzZURyaXZlciA9IHJlcXVpcmUoJ2RzZS1kcml2ZXInKTtcbn0gY2F0Y2ggKGUpIHtcbiAgZHNlRHJpdmVyID0gbnVsbDtcbn1cblxuY29uc3QgY3FsID0gUHJvbWlzZS5wcm9taXNpZnlBbGwoZHNlRHJpdmVyIHx8IHJlcXVpcmUoJ2Nhc3NhbmRyYS1kcml2ZXInKSk7XG5cbmNvbnN0IGJ1aWxkRXJyb3IgPSByZXF1aXJlKCcuLi9vcm0vYXBvbGxvX2Vycm9yLmpzJyk7XG5jb25zdCBkYXRhdHlwZXMgPSByZXF1aXJlKCcuLi92YWxpZGF0b3JzL2RhdGF0eXBlcycpO1xuY29uc3Qgc2NoZW1lciA9IHJlcXVpcmUoJy4uL3ZhbGlkYXRvcnMvc2NoZW1hJyk7XG5cbmNvbnN0IHBhcnNlciA9IHt9O1xuXG5wYXJzZXIuY2FsbGJhY2tfb3JfdGhyb3cgPSBmdW5jdGlvbiBmKGVyciwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrKGVycik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IChlcnIpO1xufTtcblxucGFyc2VyLmV4dHJhY3RfdHlwZSA9IGZ1bmN0aW9uIGYodmFsKSB7XG4gIC8vIGRlY29tcG9zZSBjb21wb3NpdGUgdHlwZXNcbiAgY29uc3QgZGVjb21wb3NlZCA9IHZhbCA/IHZhbC5yZXBsYWNlKC9bXFxzXS9nLCAnJykuc3BsaXQoL1s8LD5dL2cpIDogWycnXTtcblxuICBmb3IgKGxldCBkID0gMDsgZCA8IGRlY29tcG9zZWQubGVuZ3RoOyBkKyspIHtcbiAgICBpZiAoXy5oYXMoZGF0YXR5cGVzLCBkZWNvbXBvc2VkW2RdKSkge1xuICAgICAgcmV0dXJuIGRlY29tcG9zZWRbZF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn07XG5cbnBhcnNlci5leHRyYWN0X3R5cGVEZWYgPSBmdW5jdGlvbiBmKHZhbCkge1xuICAvLyBkZWNvbXBvc2UgY29tcG9zaXRlIHR5cGVzXG4gIGxldCBkZWNvbXBvc2VkID0gdmFsID8gdmFsLnJlcGxhY2UoL1tcXHNdL2csICcnKSA6ICcnO1xuICBkZWNvbXBvc2VkID0gZGVjb21wb3NlZC5zdWJzdHIoZGVjb21wb3NlZC5pbmRleE9mKCc8JyksIGRlY29tcG9zZWQubGVuZ3RoIC0gZGVjb21wb3NlZC5pbmRleE9mKCc8JykpO1xuXG4gIHJldHVybiBkZWNvbXBvc2VkO1xufTtcblxucGFyc2VyLmV4dHJhY3RfYWx0ZXJlZF90eXBlID0gZnVuY3Rpb24gZihub3JtYWxpemVkTW9kZWxTY2hlbWEsIGRpZmYpIHtcbiAgY29uc3QgZmllbGROYW1lID0gZGlmZi5wYXRoWzBdO1xuICBsZXQgdHlwZSA9ICcnO1xuICBpZiAoZGlmZi5wYXRoLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoZGlmZi5wYXRoWzFdID09PSAndHlwZScpIHtcbiAgICAgIHR5cGUgPSBkaWZmLnJocztcbiAgICAgIGlmIChub3JtYWxpemVkTW9kZWxTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZURlZikge1xuICAgICAgICB0eXBlICs9IG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlRGVmO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gbm9ybWFsaXplZE1vZGVsU2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGU7XG4gICAgICB0eXBlICs9IGRpZmYucmhzO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gZGlmZi5yaHMudHlwZTtcbiAgICBpZiAoZGlmZi5yaHMudHlwZURlZikgdHlwZSArPSBkaWZmLnJocy50eXBlRGVmO1xuICB9XG4gIHJldHVybiB0eXBlO1xufTtcblxucGFyc2VyLmdldF9kYl92YWx1ZV9leHByZXNzaW9uID0gZnVuY3Rpb24gZihzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRWYWx1ZSkge1xuICBpZiAoZmllbGRWYWx1ZSA9PSBudWxsIHx8IGZpZWxkVmFsdWUgPT09IGNxbC50eXBlcy51bnNldCkge1xuICAgIHJldHVybiB7IHF1ZXJ5X3NlZ21lbnQ6ICc/JywgcGFyYW1ldGVyOiBmaWVsZFZhbHVlIH07XG4gIH1cblxuICBpZiAoXy5pc1BsYWluT2JqZWN0KGZpZWxkVmFsdWUpICYmIGZpZWxkVmFsdWUuJGRiX2Z1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGZpZWxkVmFsdWUuJGRiX2Z1bmN0aW9uO1xuICB9XG5cbiAgY29uc3QgZmllbGRUeXBlID0gc2NoZW1lci5nZXRfZmllbGRfdHlwZShzY2hlbWEsIGZpZWxkTmFtZSk7XG4gIGNvbnN0IHZhbGlkYXRvcnMgPSBzY2hlbWVyLmdldF92YWxpZGF0b3JzKHNjaGVtYSwgZmllbGROYW1lKTtcblxuICBpZiAoXy5pc0FycmF5KGZpZWxkVmFsdWUpICYmIGZpZWxkVHlwZSAhPT0gJ2xpc3QnICYmIGZpZWxkVHlwZSAhPT0gJ3NldCcgJiYgZmllbGRUeXBlICE9PSAnZnJvemVuJykge1xuICAgIGNvbnN0IHZhbCA9IGZpZWxkVmFsdWUubWFwKCh2KSA9PiB7XG4gICAgICBjb25zdCBkYlZhbCA9IHBhcnNlci5nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbihzY2hlbWEsIGZpZWxkTmFtZSwgdik7XG5cbiAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZGJWYWwpICYmIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpIHJldHVybiBkYlZhbC5wYXJhbWV0ZXI7XG4gICAgICByZXR1cm4gZGJWYWw7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyBxdWVyeV9zZWdtZW50OiAnPycsIHBhcmFtZXRlcjogdmFsIH07XG4gIH1cblxuICBjb25zdCB2YWxpZGF0aW9uTWVzc2FnZSA9IHNjaGVtZXIuZ2V0X3ZhbGlkYXRpb25fbWVzc2FnZSh2YWxpZGF0b3JzLCBmaWVsZFZhbHVlKTtcbiAgaWYgKHR5cGVvZiB2YWxpZGF0aW9uTWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC52YWxpZGF0b3IuaW52YWxpZHZhbHVlJywgdmFsaWRhdGlvbk1lc3NhZ2UoZmllbGRWYWx1ZSwgZmllbGROYW1lLCBmaWVsZFR5cGUpKSk7XG4gIH1cblxuICBpZiAoZmllbGRUeXBlID09PSAnY291bnRlcicpIHtcbiAgICBsZXQgY291bnRlclF1ZXJ5U2VnbWVudCA9IHV0aWwuZm9ybWF0KCdcIiVzXCInLCBmaWVsZE5hbWUpO1xuICAgIGlmIChmaWVsZFZhbHVlID49IDApIGNvdW50ZXJRdWVyeVNlZ21lbnQgKz0gJyArID8nO1xuICAgIGVsc2UgY291bnRlclF1ZXJ5U2VnbWVudCArPSAnIC0gPyc7XG4gICAgZmllbGRWYWx1ZSA9IE1hdGguYWJzKGZpZWxkVmFsdWUpO1xuICAgIHJldHVybiB7IHF1ZXJ5X3NlZ21lbnQ6IGNvdW50ZXJRdWVyeVNlZ21lbnQsIHBhcmFtZXRlcjogZmllbGRWYWx1ZSB9O1xuICB9XG5cbiAgcmV0dXJuIHsgcXVlcnlfc2VnbWVudDogJz8nLCBwYXJhbWV0ZXI6IGZpZWxkVmFsdWUgfTtcbn07XG5cbnBhcnNlci51bnNldF9ub3RfYWxsb3dlZCA9IGZ1bmN0aW9uIGYob3BlcmF0aW9uLCBzY2hlbWEsIGZpZWxkTmFtZSwgY2FsbGJhY2spIHtcbiAgaWYgKHNjaGVtZXIuaXNfcHJpbWFyeV9rZXlfZmllbGQoc2NoZW1hLCBmaWVsZE5hbWUpKSB7XG4gICAgcGFyc2VyLmNhbGxiYWNrX29yX3Rocm93KGJ1aWxkRXJyb3IoYG1vZGVsLiR7b3BlcmF0aW9ufS51bnNldGtleWAsIGZpZWxkTmFtZSksIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoc2NoZW1lci5pc19yZXF1aXJlZF9maWVsZChzY2hlbWEsIGZpZWxkTmFtZSkpIHtcbiAgICBwYXJzZXIuY2FsbGJhY2tfb3JfdGhyb3coYnVpbGRFcnJvcihgbW9kZWwuJHtvcGVyYXRpb259LnVuc2V0cmVxdWlyZWRgLCBmaWVsZE5hbWUpLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxucGFyc2VyLmdldF9pbnBsYWNlX3VwZGF0ZV9leHByZXNzaW9uID0gZnVuY3Rpb24gZihzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRWYWx1ZSwgdXBkYXRlQ2xhdXNlcywgcXVlcnlQYXJhbXMpIHtcbiAgY29uc3QgJGFkZCA9IChfLmlzUGxhaW5PYmplY3QoZmllbGRWYWx1ZSkgJiYgZmllbGRWYWx1ZS4kYWRkKSB8fCBmYWxzZTtcbiAgY29uc3QgJGFwcGVuZCA9IChfLmlzUGxhaW5PYmplY3QoZmllbGRWYWx1ZSkgJiYgZmllbGRWYWx1ZS4kYXBwZW5kKSB8fCBmYWxzZTtcbiAgY29uc3QgJHByZXBlbmQgPSAoXy5pc1BsYWluT2JqZWN0KGZpZWxkVmFsdWUpICYmIGZpZWxkVmFsdWUuJHByZXBlbmQpIHx8IGZhbHNlO1xuICBjb25zdCAkcmVwbGFjZSA9IChfLmlzUGxhaW5PYmplY3QoZmllbGRWYWx1ZSkgJiYgZmllbGRWYWx1ZS4kcmVwbGFjZSkgfHwgZmFsc2U7XG4gIGNvbnN0ICRyZW1vdmUgPSAoXy5pc1BsYWluT2JqZWN0KGZpZWxkVmFsdWUpICYmIGZpZWxkVmFsdWUuJHJlbW92ZSkgfHwgZmFsc2U7XG5cbiAgZmllbGRWYWx1ZSA9ICRhZGQgfHwgJGFwcGVuZCB8fCAkcHJlcGVuZCB8fCAkcmVwbGFjZSB8fCAkcmVtb3ZlIHx8IGZpZWxkVmFsdWU7XG5cbiAgY29uc3QgZGJWYWwgPSBwYXJzZXIuZ2V0X2RiX3ZhbHVlX2V4cHJlc3Npb24oc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVmFsdWUpO1xuXG4gIGlmICghXy5pc1BsYWluT2JqZWN0KGRiVmFsKSB8fCAhZGJWYWwucXVlcnlfc2VnbWVudCkge1xuICAgIHVwZGF0ZUNsYXVzZXMucHVzaCh1dGlsLmZvcm1hdCgnXCIlc1wiPSVzJywgZmllbGROYW1lLCBkYlZhbCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGZpZWxkVHlwZSA9IHNjaGVtZXIuZ2V0X2ZpZWxkX3R5cGUoc2NoZW1hLCBmaWVsZE5hbWUpO1xuXG4gIGlmIChbJ21hcCcsICdsaXN0JywgJ3NldCddLmluY2x1ZGVzKGZpZWxkVHlwZSkpIHtcbiAgICBpZiAoJGFkZCB8fCAkYXBwZW5kKSB7XG4gICAgICBkYlZhbC5xdWVyeV9zZWdtZW50ID0gdXRpbC5mb3JtYXQoJ1wiJXNcIiArICVzJywgZmllbGROYW1lLCBkYlZhbC5xdWVyeV9zZWdtZW50KTtcbiAgICB9IGVsc2UgaWYgKCRwcmVwZW5kKSB7XG4gICAgICBpZiAoZmllbGRUeXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgZGJWYWwucXVlcnlfc2VnbWVudCA9IHV0aWwuZm9ybWF0KCclcyArIFwiJXNcIicsIGRiVmFsLnF1ZXJ5X3NlZ21lbnQsIGZpZWxkTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcihcbiAgICAgICAgICAnbW9kZWwudXBkYXRlLmludmFsaWRwcmVwZW5kb3AnLFxuICAgICAgICAgIHV0aWwuZm9ybWF0KCclcyBkYXRhdHlwZXMgZG9lcyBub3Qgc3VwcG9ydCAkcHJlcGVuZCwgdXNlICRhZGQgaW5zdGVhZCcsIGZpZWxkVHlwZSksXG4gICAgICAgICkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoJHJlbW92ZSkge1xuICAgICAgZGJWYWwucXVlcnlfc2VnbWVudCA9IHV0aWwuZm9ybWF0KCdcIiVzXCIgLSAlcycsIGZpZWxkTmFtZSwgZGJWYWwucXVlcnlfc2VnbWVudCk7XG4gICAgICBpZiAoZmllbGRUeXBlID09PSAnbWFwJykgZGJWYWwucGFyYW1ldGVyID0gT2JqZWN0LmtleXMoZGJWYWwucGFyYW1ldGVyKTtcbiAgICB9XG4gIH1cblxuICBpZiAoJHJlcGxhY2UpIHtcbiAgICBpZiAoZmllbGRUeXBlID09PSAnbWFwJykge1xuICAgICAgdXBkYXRlQ2xhdXNlcy5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCJbP109JXMnLCBmaWVsZE5hbWUsIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpKTtcbiAgICAgIGNvbnN0IHJlcGxhY2VLZXlzID0gT2JqZWN0LmtleXMoZGJWYWwucGFyYW1ldGVyKTtcbiAgICAgIGNvbnN0IHJlcGxhY2VWYWx1ZXMgPSBfLnZhbHVlcyhkYlZhbC5wYXJhbWV0ZXIpO1xuICAgICAgaWYgKHJlcGxhY2VLZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKHJlcGxhY2VLZXlzWzBdKTtcbiAgICAgICAgcXVlcnlQYXJhbXMucHVzaChyZXBsYWNlVmFsdWVzWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IChcbiAgICAgICAgICBidWlsZEVycm9yKCdtb2RlbC51cGRhdGUuaW52YWxpZHJlcGxhY2VvcCcsICckcmVwbGFjZSBpbiBtYXAgZG9lcyBub3Qgc3VwcG9ydCBtb3JlIHRoYW4gb25lIGl0ZW0nKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmllbGRUeXBlID09PSAnbGlzdCcpIHtcbiAgICAgIHVwZGF0ZUNsYXVzZXMucHVzaCh1dGlsLmZvcm1hdCgnXCIlc1wiWz9dPSVzJywgZmllbGROYW1lLCBkYlZhbC5xdWVyeV9zZWdtZW50KSk7XG4gICAgICBpZiAoZGJWYWwucGFyYW1ldGVyLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKGRiVmFsLnBhcmFtZXRlclswXSk7XG4gICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goZGJWYWwucGFyYW1ldGVyWzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IChidWlsZEVycm9yKFxuICAgICAgICAgICdtb2RlbC51cGRhdGUuaW52YWxpZHJlcGxhY2VvcCcsXG4gICAgICAgICAgJyRyZXBsYWNlIGluIGxpc3Qgc2hvdWxkIGhhdmUgZXhhY3RseSAyIGl0ZW1zLCBmaXJzdCBvbmUgYXMgdGhlIGluZGV4IGFuZCB0aGUgc2Vjb25kIG9uZSBhcyB0aGUgdmFsdWUnLFxuICAgICAgICApKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoXG4gICAgICAgICdtb2RlbC51cGRhdGUuaW52YWxpZHJlcGxhY2VvcCcsXG4gICAgICAgIHV0aWwuZm9ybWF0KCclcyBkYXRhdHlwZXMgZG9lcyBub3Qgc3VwcG9ydCAkcmVwbGFjZScsIGZpZWxkVHlwZSksXG4gICAgICApKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ2xhdXNlcy5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCI9JXMnLCBmaWVsZE5hbWUsIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpKTtcbiAgICBxdWVyeVBhcmFtcy5wdXNoKGRiVmFsLnBhcmFtZXRlcik7XG4gIH1cbn07XG5cbnBhcnNlci5nZXRfdXBkYXRlX3ZhbHVlX2V4cHJlc3Npb24gPSBmdW5jdGlvbiBmKGluc3RhbmNlLCBzY2hlbWEsIHVwZGF0ZVZhbHVlcywgY2FsbGJhY2spIHtcbiAgY29uc3QgdXBkYXRlQ2xhdXNlcyA9IFtdO1xuICBjb25zdCBxdWVyeVBhcmFtcyA9IFtdO1xuXG4gIGlmIChzY2hlbWEub3B0aW9ucyAmJiBzY2hlbWEub3B0aW9ucy50aW1lc3RhbXBzKSB7XG4gICAgaWYgKCF1cGRhdGVWYWx1ZXNbc2NoZW1hLm9wdGlvbnMudGltZXN0YW1wcy51cGRhdGVkQXRdKSB7XG4gICAgICB1cGRhdGVWYWx1ZXNbc2NoZW1hLm9wdGlvbnMudGltZXN0YW1wcy51cGRhdGVkQXRdID0geyAkZGJfZnVuY3Rpb246ICd0b1RpbWVzdGFtcChub3coKSknIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKHNjaGVtYS5vcHRpb25zICYmIHNjaGVtYS5vcHRpb25zLnZlcnNpb25zKSB7XG4gICAgaWYgKCF1cGRhdGVWYWx1ZXNbc2NoZW1hLm9wdGlvbnMudmVyc2lvbnMua2V5XSkge1xuICAgICAgdXBkYXRlVmFsdWVzW3NjaGVtYS5vcHRpb25zLnZlcnNpb25zLmtleV0gPSB7ICRkYl9mdW5jdGlvbjogJ25vdygpJyB9O1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVycm9ySGFwcGVuZWQgPSBPYmplY3Qua2V5cyh1cGRhdGVWYWx1ZXMpLnNvbWUoKGZpZWxkTmFtZSkgPT4ge1xuICAgIGlmIChzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gPT09IHVuZGVmaW5lZCB8fCBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udmlydHVhbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3QgZmllbGRUeXBlID0gc2NoZW1lci5nZXRfZmllbGRfdHlwZShzY2hlbWEsIGZpZWxkTmFtZSk7XG4gICAgbGV0IGZpZWxkVmFsdWUgPSB1cGRhdGVWYWx1ZXNbZmllbGROYW1lXTtcblxuICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpZWxkVmFsdWUgPSBpbnN0YW5jZS5fZ2V0X2RlZmF1bHRfdmFsdWUoZmllbGROYW1lKTtcbiAgICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlci51bnNldF9ub3RfYWxsb3dlZCgndXBkYXRlJywgc2NoZW1hLCBmaWVsZE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNjaGVtYS5maWVsZHNbZmllbGROYW1lXS5ydWxlIHx8ICFzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0ucnVsZS5pZ25vcmVfZGVmYXVsdCkge1xuICAgICAgICAvLyBkaWQgc2V0IGEgZGVmYXVsdCB2YWx1ZSwgaWdub3JlIGRlZmF1bHQgaXMgbm90IHNldFxuICAgICAgICBpZiAoaW5zdGFuY2UudmFsaWRhdGUoZmllbGROYW1lLCBmaWVsZFZhbHVlKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHBhcnNlci5jYWxsYmFja19vcl90aHJvdyhidWlsZEVycm9yKCdtb2RlbC51cGRhdGUuaW52YWxpZGRlZmF1bHR2YWx1ZScsIGZpZWxkVmFsdWUsIGZpZWxkTmFtZSwgZmllbGRUeXBlKSwgY2FsbGJhY2spO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVmFsdWUgPT09IG51bGwgfHwgZmllbGRWYWx1ZSA9PT0gY3FsLnR5cGVzLnVuc2V0KSB7XG4gICAgICBpZiAocGFyc2VyLnVuc2V0X25vdF9hbGxvd2VkKCd1cGRhdGUnLCBzY2hlbWEsIGZpZWxkTmFtZSwgY2FsbGJhY2spKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwYXJzZXIuZ2V0X2lucGxhY2VfdXBkYXRlX2V4cHJlc3Npb24oc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVmFsdWUsIHVwZGF0ZUNsYXVzZXMsIHF1ZXJ5UGFyYW1zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBwYXJzZXIuY2FsbGJhY2tfb3JfdGhyb3coZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgdXBkYXRlQ2xhdXNlcywgcXVlcnlQYXJhbXMsIGVycm9ySGFwcGVuZWQgfTtcbn07XG5cbnBhcnNlci5nZXRfc2F2ZV92YWx1ZV9leHByZXNzaW9uID0gZnVuY3Rpb24gZm4oaW5zdGFuY2UsIHNjaGVtYSwgY2FsbGJhY2spIHtcbiAgY29uc3QgaWRlbnRpZmllcnMgPSBbXTtcbiAgY29uc3QgdmFsdWVzID0gW107XG4gIGNvbnN0IHF1ZXJ5UGFyYW1zID0gW107XG5cbiAgaWYgKHNjaGVtYS5vcHRpb25zICYmIHNjaGVtYS5vcHRpb25zLnRpbWVzdGFtcHMpIHtcbiAgICBpZiAoaW5zdGFuY2Vbc2NoZW1hLm9wdGlvbnMudGltZXN0YW1wcy51cGRhdGVkQXRdKSB7XG4gICAgICBpbnN0YW5jZVtzY2hlbWEub3B0aW9ucy50aW1lc3RhbXBzLnVwZGF0ZWRBdF0gPSB7ICRkYl9mdW5jdGlvbjogJ3RvVGltZXN0YW1wKG5vdygpKScgfTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2NoZW1hLm9wdGlvbnMgJiYgc2NoZW1hLm9wdGlvbnMudmVyc2lvbnMpIHtcbiAgICBpZiAoaW5zdGFuY2Vbc2NoZW1hLm9wdGlvbnMudmVyc2lvbnMua2V5XSkge1xuICAgICAgaW5zdGFuY2Vbc2NoZW1hLm9wdGlvbnMudmVyc2lvbnMua2V5XSA9IHsgJGRiX2Z1bmN0aW9uOiAnbm93KCknIH07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZXJyb3JIYXBwZW5lZCA9IE9iamVjdC5rZXlzKHNjaGVtYS5maWVsZHMpLnNvbWUoKGZpZWxkTmFtZSkgPT4ge1xuICAgIGlmIChzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udmlydHVhbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gY2hlY2sgZmllbGQgdmFsdWVcbiAgICBjb25zdCBmaWVsZFR5cGUgPSBzY2hlbWVyLmdldF9maWVsZF90eXBlKHNjaGVtYSwgZmllbGROYW1lKTtcbiAgICBsZXQgZmllbGRWYWx1ZSA9IGluc3RhbmNlW2ZpZWxkTmFtZV07XG5cbiAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaWVsZFZhbHVlID0gaW5zdGFuY2UuX2dldF9kZWZhdWx0X3ZhbHVlKGZpZWxkTmFtZSk7XG4gICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIudW5zZXRfbm90X2FsbG93ZWQoJ3NhdmUnLCBzY2hlbWEsIGZpZWxkTmFtZSwgY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIGlmICghc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnJ1bGUgfHwgIXNjaGVtYS5maWVsZHNbZmllbGROYW1lXS5ydWxlLmlnbm9yZV9kZWZhdWx0KSB7XG4gICAgICAgIC8vIGRpZCBzZXQgYSBkZWZhdWx0IHZhbHVlLCBpZ25vcmUgZGVmYXVsdCBpcyBub3Qgc2V0XG4gICAgICAgIGlmIChpbnN0YW5jZS52YWxpZGF0ZShmaWVsZE5hbWUsIGZpZWxkVmFsdWUpICE9PSB0cnVlKSB7XG4gICAgICAgICAgcGFyc2VyLmNhbGxiYWNrX29yX3Rocm93KGJ1aWxkRXJyb3IoJ21vZGVsLnNhdmUuaW52YWxpZGRlZmF1bHR2YWx1ZScsIGZpZWxkVmFsdWUsIGZpZWxkTmFtZSwgZmllbGRUeXBlKSwgY2FsbGJhY2spO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVmFsdWUgPT09IG51bGwgfHwgZmllbGRWYWx1ZSA9PT0gY3FsLnR5cGVzLnVuc2V0KSB7XG4gICAgICBpZiAocGFyc2VyLnVuc2V0X25vdF9hbGxvd2VkKCdzYXZlJywgc2NoZW1hLCBmaWVsZE5hbWUsIGNhbGxiYWNrKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCInLCBmaWVsZE5hbWUpKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYlZhbCA9IHBhcnNlci5nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbihzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGRiVmFsKSAmJiBkYlZhbC5xdWVyeV9zZWdtZW50KSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKGRiVmFsLnF1ZXJ5X3NlZ21lbnQpO1xuICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKGRiVmFsLnBhcmFtZXRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXMucHVzaChkYlZhbCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcGFyc2VyLmNhbGxiYWNrX29yX3Rocm93KGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgaWRlbnRpZmllcnMsXG4gICAgdmFsdWVzLFxuICAgIHF1ZXJ5UGFyYW1zLFxuICAgIGVycm9ySGFwcGVuZWQsXG4gIH07XG59O1xuXG5wYXJzZXIuZXh0cmFjdF9xdWVyeV9yZWxhdGlvbnMgPSBmdW5jdGlvbiBmKGZpZWxkTmFtZSwgcmVsYXRpb25LZXksIHJlbGF0aW9uVmFsdWUsIHNjaGVtYSwgdmFsaWRPcGVyYXRvcnMpIHtcbiAgY29uc3QgcXVlcnlSZWxhdGlvbnMgPSBbXTtcbiAgY29uc3QgcXVlcnlQYXJhbXMgPSBbXTtcblxuICBpZiAoIV8uaGFzKHZhbGlkT3BlcmF0b3JzLCByZWxhdGlvbktleS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRvcCcsIHJlbGF0aW9uS2V5KSk7XG4gIH1cblxuICByZWxhdGlvbktleSA9IHJlbGF0aW9uS2V5LnRvTG93ZXJDYXNlKCk7XG4gIGlmIChyZWxhdGlvbktleSA9PT0gJyRpbicgJiYgIV8uaXNBcnJheShyZWxhdGlvblZhbHVlKSkge1xuICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRpbm9wJykpO1xuICB9XG4gIGlmIChyZWxhdGlvbktleSA9PT0gJyR0b2tlbicgJiYgIShyZWxhdGlvblZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWR0b2tlbicpKTtcbiAgfVxuXG4gIGxldCBvcGVyYXRvciA9IHZhbGlkT3BlcmF0b3JzW3JlbGF0aW9uS2V5XTtcbiAgbGV0IHdoZXJlVGVtcGxhdGUgPSAnXCIlc1wiICVzICVzJztcblxuICBjb25zdCBidWlsZFF1ZXJ5UmVsYXRpb25zID0gKGZpZWxkTmFtZUxvY2FsLCByZWxhdGlvblZhbHVlTG9jYWwpID0+IHtcbiAgICBjb25zdCBkYlZhbCA9IHBhcnNlci5nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbihzY2hlbWEsIGZpZWxkTmFtZUxvY2FsLCByZWxhdGlvblZhbHVlTG9jYWwpO1xuICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZGJWYWwpICYmIGRiVmFsLnF1ZXJ5X3NlZ21lbnQpIHtcbiAgICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgIHdoZXJlVGVtcGxhdGUsXG4gICAgICAgIGZpZWxkTmFtZUxvY2FsLCBvcGVyYXRvciwgZGJWYWwucXVlcnlfc2VnbWVudCxcbiAgICAgICkpO1xuICAgICAgcXVlcnlQYXJhbXMucHVzaChkYlZhbC5wYXJhbWV0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBxdWVyeVJlbGF0aW9ucy5wdXNoKHV0aWwuZm9ybWF0KFxuICAgICAgICB3aGVyZVRlbXBsYXRlLFxuICAgICAgICBmaWVsZE5hbWVMb2NhbCwgb3BlcmF0b3IsIGRiVmFsLFxuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGJ1aWxkVG9rZW5RdWVyeVJlbGF0aW9ucyA9ICh0b2tlblJlbGF0aW9uS2V5LCB0b2tlblJlbGF0aW9uVmFsdWUpID0+IHtcbiAgICB0b2tlblJlbGF0aW9uS2V5ID0gdG9rZW5SZWxhdGlvbktleS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChfLmhhcyh2YWxpZE9wZXJhdG9ycywgdG9rZW5SZWxhdGlvbktleSkgJiYgdG9rZW5SZWxhdGlvbktleSAhPT0gJyR0b2tlbicgJiYgdG9rZW5SZWxhdGlvbktleSAhPT0gJyRpbicpIHtcbiAgICAgIG9wZXJhdG9yID0gdmFsaWRPcGVyYXRvcnNbdG9rZW5SZWxhdGlvbktleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWR0b2tlbm9wJywgdG9rZW5SZWxhdGlvbktleSkpO1xuICAgIH1cblxuICAgIGlmIChfLmlzQXJyYXkodG9rZW5SZWxhdGlvblZhbHVlKSkge1xuICAgICAgY29uc3QgdG9rZW5LZXlzID0gZmllbGROYW1lLnNwbGl0KCcsJyk7XG4gICAgICBmb3IgKGxldCB0b2tlbkluZGV4ID0gMDsgdG9rZW5JbmRleCA8IHRva2VuUmVsYXRpb25WYWx1ZS5sZW5ndGg7IHRva2VuSW5kZXgrKykge1xuICAgICAgICB0b2tlbktleXNbdG9rZW5JbmRleF0gPSB0b2tlbktleXNbdG9rZW5JbmRleF0udHJpbSgpO1xuICAgICAgICBjb25zdCBkYlZhbCA9IHBhcnNlci5nZXRfZGJfdmFsdWVfZXhwcmVzc2lvbihzY2hlbWEsIHRva2VuS2V5c1t0b2tlbkluZGV4XSwgdG9rZW5SZWxhdGlvblZhbHVlW3Rva2VuSW5kZXhdKTtcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChkYlZhbCkgJiYgZGJWYWwucXVlcnlfc2VnbWVudCkge1xuICAgICAgICAgIHRva2VuUmVsYXRpb25WYWx1ZVt0b2tlbkluZGV4XSA9IGRiVmFsLnF1ZXJ5X3NlZ21lbnQ7XG4gICAgICAgICAgcXVlcnlQYXJhbXMucHVzaChkYlZhbC5wYXJhbWV0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2VuUmVsYXRpb25WYWx1ZVt0b2tlbkluZGV4XSA9IGRiVmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBxdWVyeVJlbGF0aW9ucy5wdXNoKHV0aWwuZm9ybWF0KFxuICAgICAgICB3aGVyZVRlbXBsYXRlLFxuICAgICAgICB0b2tlbktleXMuam9pbignXCIsXCInKSwgb3BlcmF0b3IsIHRva2VuUmVsYXRpb25WYWx1ZS50b1N0cmluZygpLFxuICAgICAgKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1aWxkUXVlcnlSZWxhdGlvbnMoZmllbGROYW1lLCB0b2tlblJlbGF0aW9uVmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBpZiAocmVsYXRpb25LZXkgPT09ICckdG9rZW4nKSB7XG4gICAgd2hlcmVUZW1wbGF0ZSA9ICd0b2tlbihcIiVzXCIpICVzIHRva2VuKCVzKSc7XG5cbiAgICBjb25zdCB0b2tlblJlbGF0aW9uS2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aW9uVmFsdWUpO1xuICAgIGZvciAobGV0IHRva2VuUksgPSAwOyB0b2tlblJLIDwgdG9rZW5SZWxhdGlvbktleXMubGVuZ3RoOyB0b2tlblJLKyspIHtcbiAgICAgIGNvbnN0IHRva2VuUmVsYXRpb25LZXkgPSB0b2tlblJlbGF0aW9uS2V5c1t0b2tlblJLXTtcbiAgICAgIGNvbnN0IHRva2VuUmVsYXRpb25WYWx1ZSA9IHJlbGF0aW9uVmFsdWVbdG9rZW5SZWxhdGlvbktleV07XG4gICAgICBidWlsZFRva2VuUXVlcnlSZWxhdGlvbnModG9rZW5SZWxhdGlvbktleSwgdG9rZW5SZWxhdGlvblZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmVsYXRpb25LZXkgPT09ICckY29udGFpbnMnKSB7XG4gICAgY29uc3QgZmllbGRUeXBlMSA9IHNjaGVtZXIuZ2V0X2ZpZWxkX3R5cGUoc2NoZW1hLCBmaWVsZE5hbWUpO1xuICAgIGlmIChbJ21hcCcsICdsaXN0JywgJ3NldCcsICdmcm96ZW4nXS5pbmNsdWRlcyhmaWVsZFR5cGUxKSkge1xuICAgICAgaWYgKGZpZWxkVHlwZTEgPT09ICdtYXAnICYmIF8uaXNQbGFpbk9iamVjdChyZWxhdGlvblZhbHVlKSkge1xuICAgICAgICBPYmplY3Qua2V5cyhyZWxhdGlvblZhbHVlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBxdWVyeVJlbGF0aW9ucy5wdXNoKHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgJ1wiJXNcIlslc10gJXMgJXMnLFxuICAgICAgICAgICAgZmllbGROYW1lLCAnPycsICc9JywgJz8nLFxuICAgICAgICAgICkpO1xuICAgICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goa2V5KTtcbiAgICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKHJlbGF0aW9uVmFsdWVba2V5XSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnlSZWxhdGlvbnMucHVzaCh1dGlsLmZvcm1hdChcbiAgICAgICAgICB3aGVyZVRlbXBsYXRlLFxuICAgICAgICAgIGZpZWxkTmFtZSwgb3BlcmF0b3IsICc/JyxcbiAgICAgICAgKSk7XG4gICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2gocmVsYXRpb25WYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRjb250YWluc29wJykpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChyZWxhdGlvbktleSA9PT0gJyRjb250YWluc19rZXknKSB7XG4gICAgY29uc3QgZmllbGRUeXBlMiA9IHNjaGVtZXIuZ2V0X2ZpZWxkX3R5cGUoc2NoZW1hLCBmaWVsZE5hbWUpO1xuICAgIGlmIChmaWVsZFR5cGUyICE9PSAnbWFwJykge1xuICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuaW52YWxpZGNvbnRhaW5za2V5b3AnKSk7XG4gICAgfVxuICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICB3aGVyZVRlbXBsYXRlLFxuICAgICAgZmllbGROYW1lLCBvcGVyYXRvciwgJz8nLFxuICAgICkpO1xuICAgIHF1ZXJ5UGFyYW1zLnB1c2gocmVsYXRpb25WYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgYnVpbGRRdWVyeVJlbGF0aW9ucyhmaWVsZE5hbWUsIHJlbGF0aW9uVmFsdWUpO1xuICB9XG4gIHJldHVybiB7IHF1ZXJ5UmVsYXRpb25zLCBxdWVyeVBhcmFtcyB9O1xufTtcblxucGFyc2VyLl9wYXJzZV9xdWVyeV9vYmplY3QgPSBmdW5jdGlvbiBmKHNjaGVtYSwgcXVlcnlPYmplY3QpIHtcbiAgbGV0IHF1ZXJ5UmVsYXRpb25zID0gW107XG4gIGxldCBxdWVyeVBhcmFtcyA9IFtdO1xuXG4gIE9iamVjdC5rZXlzKHF1ZXJ5T2JqZWN0KS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICBpZiAoZmllbGROYW1lLnN0YXJ0c1dpdGgoJyQnKSkge1xuICAgICAgLy8gc2VhcmNoIHF1ZXJpZXMgYmFzZWQgb24gbHVjZW5lIGluZGV4IG9yIHNvbHJcbiAgICAgIC8vIGVzY2FwZSBhbGwgc2luZ2xlIHF1b3RlcyBmb3IgcXVlcmllcyBpbiBjYXNzYW5kcmFcbiAgICAgIGlmIChmaWVsZE5hbWUgPT09ICckZXhwcicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeU9iamVjdFtmaWVsZE5hbWVdLmluZGV4ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgcXVlcnlPYmplY3RbZmllbGROYW1lXS5xdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBxdWVyeVJlbGF0aW9ucy5wdXNoKHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgXCJleHByKCVzLCclcycpXCIsXG4gICAgICAgICAgICBxdWVyeU9iamVjdFtmaWVsZE5hbWVdLmluZGV4LCBxdWVyeU9iamVjdFtmaWVsZE5hbWVdLnF1ZXJ5LnJlcGxhY2UoLycvZywgXCInJ1wiKSxcbiAgICAgICAgICApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5pbnZhbGlkZXhwcicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChmaWVsZE5hbWUgPT09ICckc29scl9xdWVyeScpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeU9iamVjdFtmaWVsZE5hbWVdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHF1ZXJ5UmVsYXRpb25zLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICBcInNvbHJfcXVlcnk9JyVzJ1wiLFxuICAgICAgICAgICAgcXVlcnlPYmplY3RbZmllbGROYW1lXS5yZXBsYWNlKC8nL2csIFwiJydcIiksXG4gICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuaW52YWxpZHNvbHJxdWVyeScpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB3aGVyZU9iamVjdCA9IHF1ZXJ5T2JqZWN0W2ZpZWxkTmFtZV07XG4gICAgLy8gQXJyYXkgb2Ygb3BlcmF0b3JzXG4gICAgaWYgKCFfLmlzQXJyYXkod2hlcmVPYmplY3QpKSB3aGVyZU9iamVjdCA9IFt3aGVyZU9iamVjdF07XG5cbiAgICBmb3IgKGxldCBmayA9IDA7IGZrIDwgd2hlcmVPYmplY3QubGVuZ3RoOyBmaysrKSB7XG4gICAgICBsZXQgZmllbGRSZWxhdGlvbiA9IHdoZXJlT2JqZWN0W2ZrXTtcblxuICAgICAgY29uc3QgY3FsT3BlcmF0b3JzID0ge1xuICAgICAgICAkZXE6ICc9JyxcbiAgICAgICAgJG5lOiAnIT0nLFxuICAgICAgICAkaXNudDogJ0lTIE5PVCcsXG4gICAgICAgICRndDogJz4nLFxuICAgICAgICAkbHQ6ICc8JyxcbiAgICAgICAgJGd0ZTogJz49JyxcbiAgICAgICAgJGx0ZTogJzw9JyxcbiAgICAgICAgJGluOiAnSU4nLFxuICAgICAgICAkbGlrZTogJ0xJS0UnLFxuICAgICAgICAkdG9rZW46ICd0b2tlbicsXG4gICAgICAgICRjb250YWluczogJ0NPTlRBSU5TJyxcbiAgICAgICAgJGNvbnRhaW5zX2tleTogJ0NPTlRBSU5TIEtFWScsXG4gICAgICB9O1xuXG4gICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGZpZWxkUmVsYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkS2V5cyA9IE9iamVjdC5rZXlzKGNxbE9wZXJhdG9ycyk7XG4gICAgICAgIGNvbnN0IGZpZWxkUmVsYXRpb25LZXlzID0gT2JqZWN0LmtleXMoZmllbGRSZWxhdGlvbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRSZWxhdGlvbktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoIXZhbGlkS2V5cy5pbmNsdWRlcyhmaWVsZFJlbGF0aW9uS2V5c1tpXSkpIHtcbiAgICAgICAgICAgIC8vIGZpZWxkIHJlbGF0aW9uIGtleSBpbnZhbGlkLCBhcHBseSBkZWZhdWx0ICRlcSBvcGVyYXRvclxuICAgICAgICAgICAgZmllbGRSZWxhdGlvbiA9IHsgJGVxOiBmaWVsZFJlbGF0aW9uIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkUmVsYXRpb24gPSB7ICRlcTogZmllbGRSZWxhdGlvbiB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZWxhdGlvbktleXMgPSBPYmplY3Qua2V5cyhmaWVsZFJlbGF0aW9uKTtcbiAgICAgIGZvciAobGV0IHJrID0gMDsgcmsgPCByZWxhdGlvbktleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICAgIGNvbnN0IHJlbGF0aW9uS2V5ID0gcmVsYXRpb25LZXlzW3JrXTtcbiAgICAgICAgY29uc3QgcmVsYXRpb25WYWx1ZSA9IGZpZWxkUmVsYXRpb25bcmVsYXRpb25LZXldO1xuICAgICAgICBjb25zdCBleHRyYWN0ZWRSZWxhdGlvbnMgPSBwYXJzZXIuZXh0cmFjdF9xdWVyeV9yZWxhdGlvbnMoXG4gICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgIHJlbGF0aW9uS2V5LFxuICAgICAgICAgIHJlbGF0aW9uVmFsdWUsXG4gICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgIGNxbE9wZXJhdG9ycyxcbiAgICAgICAgKTtcbiAgICAgICAgcXVlcnlSZWxhdGlvbnMgPSBxdWVyeVJlbGF0aW9ucy5jb25jYXQoZXh0cmFjdGVkUmVsYXRpb25zLnF1ZXJ5UmVsYXRpb25zKTtcbiAgICAgICAgcXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcy5jb25jYXQoZXh0cmFjdGVkUmVsYXRpb25zLnF1ZXJ5UGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB7IHF1ZXJ5UmVsYXRpb25zLCBxdWVyeVBhcmFtcyB9O1xufTtcblxucGFyc2VyLmdldF9maWx0ZXJfY2xhdXNlID0gZnVuY3Rpb24gZihzY2hlbWEsIHF1ZXJ5T2JqZWN0LCBjbGF1c2UpIHtcbiAgY29uc3QgcGFyc2VkT2JqZWN0ID0gcGFyc2VyLl9wYXJzZV9xdWVyeV9vYmplY3Qoc2NoZW1hLCBxdWVyeU9iamVjdCk7XG4gIGNvbnN0IGZpbHRlckNsYXVzZSA9IHt9O1xuICBpZiAocGFyc2VkT2JqZWN0LnF1ZXJ5UmVsYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICBmaWx0ZXJDbGF1c2UucXVlcnkgPSB1dGlsLmZvcm1hdCgnJXMgJXMnLCBjbGF1c2UsIHBhcnNlZE9iamVjdC5xdWVyeVJlbGF0aW9ucy5qb2luKCcgQU5EICcpKTtcbiAgfSBlbHNlIHtcbiAgICBmaWx0ZXJDbGF1c2UucXVlcnkgPSAnJztcbiAgfVxuICBmaWx0ZXJDbGF1c2UucGFyYW1zID0gcGFyc2VkT2JqZWN0LnF1ZXJ5UGFyYW1zO1xuICByZXR1cm4gZmlsdGVyQ2xhdXNlO1xufTtcblxucGFyc2VyLmdldF9maWx0ZXJfY2xhdXNlX2RkbCA9IGZ1bmN0aW9uIGYoc2NoZW1hLCBxdWVyeU9iamVjdCwgY2xhdXNlKSB7XG4gIGNvbnN0IGZpbHRlckNsYXVzZSA9IHBhcnNlci5nZXRfZmlsdGVyX2NsYXVzZShzY2hlbWEsIHF1ZXJ5T2JqZWN0LCBjbGF1c2UpO1xuICBsZXQgZmlsdGVyUXVlcnkgPSBmaWx0ZXJDbGF1c2UucXVlcnk7XG4gIGZpbHRlckNsYXVzZS5wYXJhbXMuZm9yRWFjaCgocGFyYW0pID0+IHtcbiAgICBsZXQgcXVlcnlQYXJhbTtcbiAgICBpZiAodHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJykge1xuICAgICAgcXVlcnlQYXJhbSA9IHV0aWwuZm9ybWF0KFwiJyVzJ1wiLCBwYXJhbSk7XG4gICAgfSBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHF1ZXJ5UGFyYW0gPSB1dGlsLmZvcm1hdChcIiclcydcIiwgcGFyYW0udG9JU09TdHJpbmcoKSk7XG4gICAgfSBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIGNxbC50eXBlcy5Mb25nXG4gICAgICB8fCBwYXJhbSBpbnN0YW5jZW9mIGNxbC50eXBlcy5JbnRlZ2VyXG4gICAgICB8fCBwYXJhbSBpbnN0YW5jZW9mIGNxbC50eXBlcy5CaWdEZWNpbWFsXG4gICAgICB8fCBwYXJhbSBpbnN0YW5jZW9mIGNxbC50eXBlcy5UaW1lVXVpZFxuICAgICAgfHwgcGFyYW0gaW5zdGFuY2VvZiBjcWwudHlwZXMuVXVpZCkge1xuICAgICAgcXVlcnlQYXJhbSA9IHBhcmFtLnRvU3RyaW5nKCk7XG4gICAgfSBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIGNxbC50eXBlcy5Mb2NhbERhdGVcbiAgICAgIHx8IHBhcmFtIGluc3RhbmNlb2YgY3FsLnR5cGVzLkxvY2FsVGltZVxuICAgICAgfHwgcGFyYW0gaW5zdGFuY2VvZiBjcWwudHlwZXMuSW5ldEFkZHJlc3MpIHtcbiAgICAgIHF1ZXJ5UGFyYW0gPSB1dGlsLmZvcm1hdChcIiclcydcIiwgcGFyYW0udG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXJ5UGFyYW0gPSBwYXJhbTtcbiAgICB9XG4gICAgLy8gVE9ETzogdW5oYW5kbGVkIGlmIHF1ZXJ5UGFyYW0gaXMgYSBzdHJpbmcgY29udGFpbmluZyA/IGNoYXJhY3RlclxuICAgIC8vIHRob3VnaCB0aGlzIGlzIHVubGlrZWx5IHRvIGhhdmUgaW4gbWF0ZXJpYWxpemVkIHZpZXcgZmlsdGVycywgYnV0Li4uXG4gICAgZmlsdGVyUXVlcnkgPSBmaWx0ZXJRdWVyeS5yZXBsYWNlKCc/JywgcXVlcnlQYXJhbSk7XG4gIH0pO1xuICByZXR1cm4gZmlsdGVyUXVlcnk7XG59O1xuXG5wYXJzZXIuZ2V0X3doZXJlX2NsYXVzZSA9IGZ1bmN0aW9uIGYoc2NoZW1hLCBxdWVyeU9iamVjdCkge1xuICByZXR1cm4gcGFyc2VyLmdldF9maWx0ZXJfY2xhdXNlKHNjaGVtYSwgcXVlcnlPYmplY3QsICdXSEVSRScpO1xufTtcblxucGFyc2VyLmdldF9pZl9jbGF1c2UgPSBmdW5jdGlvbiBmKHNjaGVtYSwgcXVlcnlPYmplY3QpIHtcbiAgcmV0dXJuIHBhcnNlci5nZXRfZmlsdGVyX2NsYXVzZShzY2hlbWEsIHF1ZXJ5T2JqZWN0LCAnSUYnKTtcbn07XG5cbnBhcnNlci5nZXRfcHJpbWFyeV9rZXlfY2xhdXNlcyA9IGZ1bmN0aW9uIGYoc2NoZW1hKSB7XG4gIGNvbnN0IHBhcnRpdGlvbktleSA9IHNjaGVtYS5rZXlbMF07XG4gIGxldCBjbHVzdGVyaW5nS2V5ID0gc2NoZW1hLmtleS5zbGljZSgxLCBzY2hlbWEua2V5Lmxlbmd0aCk7XG4gIGNvbnN0IGNsdXN0ZXJpbmdPcmRlciA9IFtdO1xuXG4gIGZvciAobGV0IGZpZWxkID0gMDsgZmllbGQgPCBjbHVzdGVyaW5nS2V5Lmxlbmd0aDsgZmllbGQrKykge1xuICAgIGlmIChzY2hlbWEuY2x1c3RlcmluZ19vcmRlclxuICAgICAgICAmJiBzY2hlbWEuY2x1c3RlcmluZ19vcmRlcltjbHVzdGVyaW5nS2V5W2ZpZWxkXV1cbiAgICAgICAgJiYgc2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJbY2x1c3RlcmluZ0tleVtmaWVsZF1dLnRvTG93ZXJDYXNlKCkgPT09ICdkZXNjJykge1xuICAgICAgY2x1c3RlcmluZ09yZGVyLnB1c2godXRpbC5mb3JtYXQoJ1wiJXNcIiBERVNDJywgY2x1c3RlcmluZ0tleVtmaWVsZF0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2x1c3RlcmluZ09yZGVyLnB1c2godXRpbC5mb3JtYXQoJ1wiJXNcIiBBU0MnLCBjbHVzdGVyaW5nS2V5W2ZpZWxkXSkpO1xuICAgIH1cbiAgfVxuXG4gIGxldCBjbHVzdGVyaW5nT3JkZXJDbGF1c2UgPSAnJztcbiAgaWYgKGNsdXN0ZXJpbmdPcmRlci5sZW5ndGggPiAwKSB7XG4gICAgY2x1c3RlcmluZ09yZGVyQ2xhdXNlID0gdXRpbC5mb3JtYXQoJyBXSVRIIENMVVNURVJJTkcgT1JERVIgQlkgKCVzKScsIGNsdXN0ZXJpbmdPcmRlci50b1N0cmluZygpKTtcbiAgfVxuXG4gIGxldCBwYXJ0aXRpb25LZXlDbGF1c2UgPSAnJztcbiAgaWYgKF8uaXNBcnJheShwYXJ0aXRpb25LZXkpKSB7XG4gICAgcGFydGl0aW9uS2V5Q2xhdXNlID0gcGFydGl0aW9uS2V5Lm1hcCgodikgPT4gdXRpbC5mb3JtYXQoJ1wiJXNcIicsIHYpKS5qb2luKCcsJyk7XG4gIH0gZWxzZSB7XG4gICAgcGFydGl0aW9uS2V5Q2xhdXNlID0gdXRpbC5mb3JtYXQoJ1wiJXNcIicsIHBhcnRpdGlvbktleSk7XG4gIH1cblxuICBsZXQgY2x1c3RlcmluZ0tleUNsYXVzZSA9ICcnO1xuICBpZiAoY2x1c3RlcmluZ0tleS5sZW5ndGgpIHtcbiAgICBjbHVzdGVyaW5nS2V5ID0gY2x1c3RlcmluZ0tleS5tYXAoKHYpID0+IHV0aWwuZm9ybWF0KCdcIiVzXCInLCB2KSkuam9pbignLCcpO1xuICAgIGNsdXN0ZXJpbmdLZXlDbGF1c2UgPSB1dGlsLmZvcm1hdCgnLCVzJywgY2x1c3RlcmluZ0tleSk7XG4gIH1cblxuICByZXR1cm4geyBwYXJ0aXRpb25LZXlDbGF1c2UsIGNsdXN0ZXJpbmdLZXlDbGF1c2UsIGNsdXN0ZXJpbmdPcmRlckNsYXVzZSB9O1xufTtcblxucGFyc2VyLmdldF9tdmlld193aGVyZV9jbGF1c2UgPSBmdW5jdGlvbiBmKHNjaGVtYSwgdmlld1NjaGVtYSkge1xuICBjb25zdCBjbGF1c2VzID0gcGFyc2VyLmdldF9wcmltYXJ5X2tleV9jbGF1c2VzKHZpZXdTY2hlbWEpO1xuICBsZXQgd2hlcmVDbGF1c2UgPSBjbGF1c2VzLnBhcnRpdGlvbktleUNsYXVzZS5zcGxpdCgnLCcpLmpvaW4oJyBJUyBOT1QgTlVMTCBBTkQgJyk7XG4gIGlmIChjbGF1c2VzLmNsdXN0ZXJpbmdLZXlDbGF1c2UpIHdoZXJlQ2xhdXNlICs9IGNsYXVzZXMuY2x1c3RlcmluZ0tleUNsYXVzZS5zcGxpdCgnLCcpLmpvaW4oJyBJUyBOT1QgTlVMTCBBTkQgJyk7XG4gIHdoZXJlQ2xhdXNlICs9ICcgSVMgTk9UIE5VTEwnO1xuXG4gIGNvbnN0IGZpbHRlcnMgPSBfLmNsb25lRGVlcCh2aWV3U2NoZW1hLmZpbHRlcnMpO1xuXG4gIGlmIChfLmlzUGxhaW5PYmplY3QoZmlsdGVycykpIHtcbiAgICAvLyBkZWxldGUgcHJpbWFyeSBrZXkgZmllbGRzIGRlZmluZWQgYXMgaXNuJ3QgbnVsbCBpbiBmaWx0ZXJzXG4gICAgT2JqZWN0LmtleXMoZmlsdGVycykuZm9yRWFjaCgoZmlsdGVyS2V5KSA9PiB7XG4gICAgICBpZiAoZmlsdGVyc1tmaWx0ZXJLZXldLiRpc250ID09PSBudWxsXG4gICAgICAgICAgJiYgKHZpZXdTY2hlbWEua2V5LmluY2x1ZGVzKGZpbHRlcktleSkgfHwgdmlld1NjaGVtYS5rZXlbMF0uaW5jbHVkZXMoZmlsdGVyS2V5KSkpIHtcbiAgICAgICAgZGVsZXRlIGZpbHRlcnNbZmlsdGVyS2V5XS4kaXNudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGZpbHRlckNsYXVzZSA9IHBhcnNlci5nZXRfZmlsdGVyX2NsYXVzZV9kZGwoc2NoZW1hLCBmaWx0ZXJzLCAnQU5EJyk7XG4gICAgd2hlcmVDbGF1c2UgKz0gdXRpbC5mb3JtYXQoJyAlcycsIGZpbHRlckNsYXVzZSkucmVwbGFjZSgvSVMgTk9UIG51bGwvZywgJ0lTIE5PVCBOVUxMJyk7XG4gIH1cblxuICAvLyByZW1vdmUgdW5uZWNlc3NhcmlseSBxdW90ZWQgZmllbGQgbmFtZXMgaW4gZ2VuZXJhdGVkIHdoZXJlIGNsYXVzZVxuICAvLyBzbyB0aGF0IGl0IG1hdGNoZXMgdGhlIHdoZXJlX2NsYXVzZSBmcm9tIGRhdGFiYXNlIHNjaGVtYVxuICBjb25zdCBxdW90ZWRGaWVsZE5hbWVzID0gd2hlcmVDbGF1c2UubWF0Y2goL1wiKC4qPylcIi9nKTtcbiAgcXVvdGVkRmllbGROYW1lcy5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICBjb25zdCB1bnF1b3RlZEZpZWxkTmFtZSA9IGZpZWxkTmFtZS5yZXBsYWNlKC9cIi9nLCAnJyk7XG4gICAgY29uc3QgcmVzZXJ2ZWRLZXl3b3JkcyA9IFtcbiAgICAgICdBREQnLCAnQUdHUkVHQVRFJywgJ0FMTE9XJywgJ0FMVEVSJywgJ0FORCcsICdBTlknLCAnQVBQTFknLFxuICAgICAgJ0FTQycsICdBVVRIT1JJWkUnLCAnQkFUQ0gnLCAnQkVHSU4nLCAnQlknLCAnQ09MVU1ORkFNSUxZJyxcbiAgICAgICdDUkVBVEUnLCAnREVMRVRFJywgJ0RFU0MnLCAnRFJPUCcsICdFQUNIX1FVT1JVTScsICdFTlRSSUVTJyxcbiAgICAgICdGUk9NJywgJ0ZVTEwnLCAnR1JBTlQnLCAnSUYnLCAnSU4nLCAnSU5ERVgnLCAnSU5FVCcsICdJTkZJTklUWScsXG4gICAgICAnSU5TRVJUJywgJ0lOVE8nLCAnS0VZU1BBQ0UnLCAnS0VZU1BBQ0VTJywgJ0xJTUlUJywgJ0xPQ0FMX09ORScsXG4gICAgICAnTE9DQUxfUVVPUlVNJywgJ01BVEVSSUFMSVpFRCcsICdNT0RJRlknLCAnTkFOJywgJ05PUkVDVVJTSVZFJyxcbiAgICAgICdOT1QnLCAnT0YnLCAnT04nLCAnT05FJywgJ09SREVSJywgJ1BBUlRJVElPTicsICdQQVNTV09SRCcsICdQRVInLFxuICAgICAgJ1BSSU1BUlknLCAnUVVPUlVNJywgJ1JFTkFNRScsICdSRVZPS0UnLCAnU0NIRU1BJywgJ1NFTEVDVCcsICdTRVQnLFxuICAgICAgJ1RBQkxFJywgJ1RJTUUnLCAnVEhSRUUnLCAnVE8nLCAnVE9LRU4nLCAnVFJVTkNBVEUnLCAnVFdPJywgJ1VOTE9HR0VEJyxcbiAgICAgICdVUERBVEUnLCAnVVNFJywgJ1VTSU5HJywgJ1ZJRVcnLCAnV0hFUkUnLCAnV0lUSCddO1xuICAgIGlmICh1bnF1b3RlZEZpZWxkTmFtZSA9PT0gdW5xdW90ZWRGaWVsZE5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgJiYgIXJlc2VydmVkS2V5d29yZHMuaW5jbHVkZXModW5xdW90ZWRGaWVsZE5hbWUudG9VcHBlckNhc2UoKSkpIHtcbiAgICAgIHdoZXJlQ2xhdXNlID0gd2hlcmVDbGF1c2UucmVwbGFjZShmaWVsZE5hbWUsIHVucXVvdGVkRmllbGROYW1lKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gd2hlcmVDbGF1c2UudHJpbSgpO1xufTtcblxucGFyc2VyLmdldF9vcmRlcmJ5X2NsYXVzZSA9IGZ1bmN0aW9uIGYocXVlcnlPYmplY3QpIHtcbiAgY29uc3Qgb3JkZXJLZXlzID0gW107XG4gIE9iamVjdC5rZXlzKHF1ZXJ5T2JqZWN0KS5mb3JFYWNoKChrKSA9PiB7XG4gICAgY29uc3QgcXVlcnlJdGVtID0gcXVlcnlPYmplY3Rba107XG4gICAgaWYgKGsudG9Mb3dlckNhc2UoKSA9PT0gJyRvcmRlcmJ5Jykge1xuICAgICAgaWYgKCEocXVlcnlJdGVtIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5pbnZhbGlkb3JkZXInKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvcmRlckl0ZW1LZXlzID0gT2JqZWN0LmtleXMocXVlcnlJdGVtKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlckl0ZW1LZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNxbE9yZGVyRGlyZWN0aW9uID0geyAkYXNjOiAnQVNDJywgJGRlc2M6ICdERVNDJyB9O1xuICAgICAgICBpZiAob3JkZXJJdGVtS2V5c1tpXS50b0xvd2VyQ2FzZSgpIGluIGNxbE9yZGVyRGlyZWN0aW9uKSB7XG4gICAgICAgICAgbGV0IG9yZGVyRmllbGRzID0gcXVlcnlJdGVtW29yZGVySXRlbUtleXNbaV1dO1xuXG4gICAgICAgICAgaWYgKCFfLmlzQXJyYXkob3JkZXJGaWVsZHMpKSB7XG4gICAgICAgICAgICBvcmRlckZpZWxkcyA9IFtvcmRlckZpZWxkc107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvcmRlckZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgb3JkZXJLZXlzLnB1c2godXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICdcIiVzXCIgJXMnLFxuICAgICAgICAgICAgICBvcmRlckZpZWxkc1tqXSwgY3FsT3JkZXJEaXJlY3Rpb25bb3JkZXJJdGVtS2V5c1tpXV0sXG4gICAgICAgICAgICApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgKGJ1aWxkRXJyb3IoJ21vZGVsLmZpbmQuaW52YWxpZG9yZGVydHlwZScsIG9yZGVySXRlbUtleXNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvcmRlcktleXMubGVuZ3RoID8gdXRpbC5mb3JtYXQoJ09SREVSIEJZICVzJywgb3JkZXJLZXlzLmpvaW4oJywgJykpIDogJyc7XG59O1xuXG5wYXJzZXIuZ2V0X2dyb3VwYnlfY2xhdXNlID0gZnVuY3Rpb24gZihxdWVyeU9iamVjdCkge1xuICBsZXQgZ3JvdXBieUtleXMgPSBbXTtcblxuICBPYmplY3Qua2V5cyhxdWVyeU9iamVjdCkuZm9yRWFjaCgoaykgPT4ge1xuICAgIGNvbnN0IHF1ZXJ5SXRlbSA9IHF1ZXJ5T2JqZWN0W2tdO1xuXG4gICAgaWYgKGsudG9Mb3dlckNhc2UoKSA9PT0gJyRncm91cGJ5Jykge1xuICAgICAgaWYgKCEocXVlcnlJdGVtIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IChidWlsZEVycm9yKCdtb2RlbC5maW5kLmludmFsaWRncm91cCcpKTtcbiAgICAgIH1cblxuICAgICAgZ3JvdXBieUtleXMgPSBncm91cGJ5S2V5cy5jb25jYXQocXVlcnlJdGVtKTtcbiAgICB9XG4gIH0pO1xuXG4gIGdyb3VwYnlLZXlzID0gZ3JvdXBieUtleXMubWFwKChrZXkpID0+IGBcIiR7a2V5fVwiYCk7XG5cbiAgcmV0dXJuIGdyb3VwYnlLZXlzLmxlbmd0aCA/IHV0aWwuZm9ybWF0KCdHUk9VUCBCWSAlcycsIGdyb3VwYnlLZXlzLmpvaW4oJywgJykpIDogJyc7XG59O1xuXG5wYXJzZXIuZ2V0X2xpbWl0X2NsYXVzZSA9IGZ1bmN0aW9uIGYocXVlcnlPYmplY3QpIHtcbiAgbGV0IGxpbWl0ID0gbnVsbDtcbiAgT2JqZWN0LmtleXMocXVlcnlPYmplY3QpLmZvckVhY2goKGspID0+IHtcbiAgICBjb25zdCBxdWVyeUl0ZW0gPSBxdWVyeU9iamVjdFtrXTtcbiAgICBpZiAoay50b0xvd2VyQ2FzZSgpID09PSAnJGxpbWl0Jykge1xuICAgICAgaWYgKHR5cGVvZiBxdWVyeUl0ZW0gIT09ICdudW1iZXInKSB0aHJvdyAoYnVpbGRFcnJvcignbW9kZWwuZmluZC5saW1pdHR5cGUnKSk7XG4gICAgICBsaW1pdCA9IHF1ZXJ5SXRlbTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGltaXQgPyB1dGlsLmZvcm1hdCgnTElNSVQgJXMnLCBsaW1pdCkgOiAnJztcbn07XG5cbnBhcnNlci5nZXRfc2VsZWN0X2NsYXVzZSA9IGZ1bmN0aW9uIGYob3B0aW9ucykge1xuICBsZXQgc2VsZWN0Q2xhdXNlID0gJyonO1xuICBpZiAob3B0aW9ucy5zZWxlY3QgJiYgXy5pc0FycmF5KG9wdGlvbnMuc2VsZWN0KSAmJiBvcHRpb25zLnNlbGVjdC5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgc2VsZWN0QXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMuc2VsZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBzZXBhcmF0ZSB0aGUgYWdncmVnYXRlIGZ1bmN0aW9uIGFuZCB0aGUgY29sdW1uIG5hbWUgaWYgc2VsZWN0IGlzIGFuIGFnZ3JlZ2F0ZSBmdW5jdGlvblxuICAgICAgY29uc3Qgc2VsZWN0aW9uID0gb3B0aW9ucy5zZWxlY3RbaV0uc3BsaXQoL1soLCApXS9nKS5maWx0ZXIoKGUpID0+IChlKSk7XG4gICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAoc2VsZWN0aW9uWzBdID09PSAnKicpIHNlbGVjdEFycmF5LnB1c2goJyonKTtcbiAgICAgICAgZWxzZSBzZWxlY3RBcnJheS5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCInLCBzZWxlY3Rpb25bMF0pKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBzZWxlY3RBcnJheS5wdXNoKHV0aWwuZm9ybWF0KCclcyhcIiVzXCIpJywgc2VsZWN0aW9uWzBdLCBzZWxlY3Rpb25bMV0pKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLmxlbmd0aCA+PSAzICYmIHNlbGVjdGlvbltzZWxlY3Rpb24ubGVuZ3RoIC0gMl0udG9Mb3dlckNhc2UoKSA9PT0gJ2FzJykge1xuICAgICAgICBjb25zdCBzZWxlY3Rpb25FbmRDaHVuayA9IHNlbGVjdGlvbi5zcGxpY2Uoc2VsZWN0aW9uLmxlbmd0aCAtIDIpO1xuICAgICAgICBsZXQgc2VsZWN0aW9uQ2h1bmsgPSAnJztcbiAgICAgICAgaWYgKHNlbGVjdGlvbi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBzZWxlY3Rpb25DaHVuayA9IHV0aWwuZm9ybWF0KCdcIiVzXCInLCBzZWxlY3Rpb25bMF0pO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbi5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICBzZWxlY3Rpb25DaHVuayA9IHV0aWwuZm9ybWF0KCclcyhcIiVzXCIpJywgc2VsZWN0aW9uWzBdLCBzZWxlY3Rpb25bMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdGlvbkNodW5rID0gdXRpbC5mb3JtYXQoJyVzKCVzKScsIHNlbGVjdGlvblswXSwgYFwiJHtzZWxlY3Rpb24uc3BsaWNlKDEpLmpvaW4oJ1wiLFwiJyl9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3RBcnJheS5wdXNoKHV0aWwuZm9ybWF0KCclcyBBUyBcIiVzXCInLCBzZWxlY3Rpb25DaHVuaywgc2VsZWN0aW9uRW5kQ2h1bmtbMV0pKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIHNlbGVjdEFycmF5LnB1c2godXRpbC5mb3JtYXQoJyVzKCVzKScsIHNlbGVjdGlvblswXSwgYFwiJHtzZWxlY3Rpb24uc3BsaWNlKDEpLmpvaW4oJ1wiLFwiJyl9XCJgKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGVjdENsYXVzZSA9IHNlbGVjdEFycmF5LmpvaW4oJywnKTtcbiAgfVxuICByZXR1cm4gc2VsZWN0Q2xhdXNlLnRyaW0oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VyO1xuIl19